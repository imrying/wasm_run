// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class WasmitDart {
  Memory createSharedMemory({required CompiledModule module, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateSharedMemoryConstMeta;

  WasmitModuleId moduleBuilder(
      {required CompiledModule module,
      WasiConfigNative? wasiConfig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kModuleBuilderConstMeta;

  Future<Uint8List> parseWatFormat({required String wat, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta;

  Future<CompiledModule> compileWasm(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta;

  CompiledModule compileWasmSync(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmSyncConstMeta;

  WasmFeatures wasmFeaturesForConfig(
      {required ModuleConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWasmFeaturesForConfigConstMeta;

  WasmRuntimeFeatures wasmRuntimeFeatures({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWasmRuntimeFeaturesConstMeta;

  List<ModuleExportValue> exportsMethodWasmitInstanceId(
      {required WasmitInstanceId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExportsMethodWasmitInstanceIdConstMeta;

  WasmitInstanceId instantiateSyncMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kInstantiateSyncMethodWasmitModuleIdConstMeta;

  Future<WasmitInstanceId> instantiateMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstantiateMethodWasmitModuleIdConstMeta;

  void linkImportsMethodWasmitModuleId(
      {required WasmitModuleId that,
      required List<ModuleImport> imports,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLinkImportsMethodWasmitModuleIdConstMeta;

  Stream<Uint8List> stdioStreamMethodWasmitModuleId(
      {required WasmitModuleId that, required StdIOKind kind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStdioStreamMethodWasmitModuleIdConstMeta;

  Future<void> disposeMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisposeMethodWasmitModuleIdConstMeta;

  List<WasmVal> callFunctionHandleSyncMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleSyncMethodWasmitModuleIdConstMeta;

  Future<List<WasmVal>> callFunctionHandleMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleMethodWasmitModuleIdConstMeta;

  FuncTy getFunctionTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required WFunc func, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetFunctionTypeMethodWasmitModuleIdConstMeta;

  WFunc createFunctionMethodWasmitModuleId(
      {required WasmitModuleId that,
      required int functionPointer,
      required int functionId,
      required List<ValueTy> paramTypes,
      required List<ValueTy> resultTypes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateFunctionMethodWasmitModuleIdConstMeta;

  Memory createMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required MemoryTy memoryType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateMemoryMethodWasmitModuleIdConstMeta;

  Global createGlobalMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WasmVal value,
      required GlobalMutability mutability,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateGlobalMethodWasmitModuleIdConstMeta;

  Table createTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WasmVal value,
      required TableArgs tableType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateTableMethodWasmitModuleIdConstMeta;

  GlobalTy getGlobalTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required Global global, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalTypeMethodWasmitModuleIdConstMeta;

  WasmVal getGlobalValueMethodWasmitModuleId(
      {required WasmitModuleId that, required Global global, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalValueMethodWasmitModuleIdConstMeta;

  void setGlobalValueMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Global global,
      required WasmVal value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSetGlobalValueMethodWasmitModuleIdConstMeta;

  MemoryTy getMemoryTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryTypeMethodWasmitModuleIdConstMeta;

  Uint8List getMemoryDataMethodWasmitModuleId(
      {required WasmitModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataMethodWasmitModuleIdConstMeta;

  Uint8List readMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Memory memory,
      required int offset,
      required int bytes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadMemoryMethodWasmitModuleIdConstMeta;

  int getMemoryPagesMethodWasmitModuleId(
      {required WasmitModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryPagesMethodWasmitModuleIdConstMeta;

  void writeMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Memory memory,
      required int offset,
      required Uint8List buffer,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteMemoryMethodWasmitModuleIdConstMeta;

  int growMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Memory memory,
      required int pages,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowMemoryMethodWasmitModuleIdConstMeta;

  int getTableSizeMethodWasmitModuleId(
      {required WasmitModuleId that, required Table table, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableSizeMethodWasmitModuleIdConstMeta;

  TableTy getTableTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required Table table, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableTypeMethodWasmitModuleIdConstMeta;

  int growTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int delta,
      required WasmVal value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowTableMethodWasmitModuleIdConstMeta;

  WasmVal? getTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int index,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableMethodWasmitModuleIdConstMeta;

  void setTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetTableMethodWasmitModuleIdConstMeta;

  void fillTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      required int len,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFillTableMethodWasmitModuleIdConstMeta;

  void addFuelMethodWasmitModuleId(
      {required WasmitModuleId that, required int delta, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddFuelMethodWasmitModuleIdConstMeta;

  int? fuelConsumedMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFuelConsumedMethodWasmitModuleIdConstMeta;

  int consumeFuelMethodWasmitModuleId(
      {required WasmitModuleId that, required int delta, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConsumeFuelMethodWasmitModuleIdConstMeta;

  List<ModuleImportDesc> getModuleImportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleImportsMethodCompiledModuleConstMeta;

  List<ModuleExportDesc> getModuleExportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodCompiledModuleConstMeta;

  DropFnType get dropOpaqueArcStdSyncMutexModule;
  ShareFnType get shareOpaqueArcStdSyncMutexModule;
  OpaqueTypeFinalizer get ArcStdSyncMutexModuleFinalizer;

  DropFnType get dropOpaqueGlobal;
  ShareFnType get shareOpaqueGlobal;
  OpaqueTypeFinalizer get GlobalFinalizer;

  DropFnType get dropOpaqueMemory;
  ShareFnType get shareOpaqueMemory;
  OpaqueTypeFinalizer get MemoryFinalizer;

  DropFnType get dropOpaqueTable;
  ShareFnType get shareOpaqueTable;
  OpaqueTypeFinalizer get TableFinalizer;

  DropFnType get dropOpaqueWFunc;
  ShareFnType get shareOpaqueWFunc;
  OpaqueTypeFinalizer get WFuncFinalizer;
}

@sealed
class ArcStdSyncMutexModule extends FrbOpaque {
  final WasmitDart bridge;
  ArcStdSyncMutexModule.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcStdSyncMutexModule;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcStdSyncMutexModule;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcStdSyncMutexModuleFinalizer;
}

@sealed
class Global extends FrbOpaque {
  final WasmitDart bridge;
  Global.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueGlobal;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueGlobal;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.GlobalFinalizer;
}

@sealed
class Memory extends FrbOpaque {
  final WasmitDart bridge;
  Memory.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMemory;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMemory;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MemoryFinalizer;
}

@sealed
class Table extends FrbOpaque {
  final WasmitDart bridge;
  Table.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueTable;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueTable;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.TableFinalizer;
}

@sealed
class WFunc extends FrbOpaque {
  final WasmitDart bridge;
  WFunc.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueWFunc;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueWFunc;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.WFuncFinalizer;
}

class CompiledModule {
  final WasmitDart bridge;
  final ArcStdSyncMutexModule field0;

  const CompiledModule({
    required this.bridge,
    required this.field0,
  });

  List<ModuleImportDesc> getModuleImports({dynamic hint}) =>
      bridge.getModuleImportsMethodCompiledModule(
        that: this,
      );

  List<ModuleExportDesc> getModuleExports({dynamic hint}) =>
      bridge.getModuleExportsMethodCompiledModule(
        that: this,
      );
}

class EnvVariable {
  /// The name of the environment variable
  final String name;

  /// The value of the environment variable
  final String value;

  const EnvVariable({
    required this.name,
    required this.value,
  });
}

@freezed
class ExternalType with _$ExternalType {
  /// A [FuncTy].
  const factory ExternalType.func(
    FuncTy field0,
  ) = ExternalType_Func;

  /// A [GlobalTy].
  const factory ExternalType.global(
    GlobalTy field0,
  ) = ExternalType_Global;

  /// A [TableTy].
  const factory ExternalType.table(
    TableTy field0,
  ) = ExternalType_Table;

  /// A [MemoryTy].
  const factory ExternalType.memory(
    MemoryTy field0,
  ) = ExternalType_Memory;
}

@freezed
class ExternalValue with _$ExternalValue {
  const factory ExternalValue.func(
    WFunc field0,
  ) = ExternalValue_Func;
  const factory ExternalValue.global(
    Global field0,
  ) = ExternalValue_Global;
  const factory ExternalValue.table(
    Table field0,
  ) = ExternalValue_Table;
  const factory ExternalValue.memory(
    Memory field0,
  ) = ExternalValue_Memory;
}

class FuncTy {
  /// The number of function parameters.
  final List<ValueTy> params;

  /// The ordered and merged parameter and result types of the function type.]
  final List<ValueTy> results;

  const FuncTy({
    required this.params,
    required this.results,
  });
}

enum GlobalMutability {
  /// The value of the global variable is a constant.
  Const,

  /// The value of the global variable is mutable.
  Var,
}

class GlobalTy {
  /// The value type of the global variable.
  final ValueTy content;

  /// The mutability of the global variable.
  final GlobalMutability mutability;

  const GlobalTy({
    required this.content,
    required this.mutability,
  });
}

class MemoryTy {
  /// The number of initial pages associated with the memory.
  final int initialPages;

  /// The maximum number of pages this memory can have.
  final int? maximumPages;

  const MemoryTy({
    required this.initialPages,
    this.maximumPages,
  });
}

class ModuleConfig {
  /// Is `true` if the [`multi-value`] Wasm proposal is enabled.
  final bool? multiValue;

  /// Is `true` if the [`bulk-memory`] Wasm proposal is enabled.
  final bool? bulkMemory;

  /// Is `true` if the [`reference-types`] Wasm proposal is enabled.
  final bool? referenceTypes;

  /// Is `true` if executions shall consume fuel.
  final bool? consumeFuel;

  /// Configuration specific to the wasmi runtime
  final ModuleConfigWasmi? wasmi;

  /// Configuration specific to the wasmtime runtime
  final ModuleConfigWasmtime? wasmtime;

  const ModuleConfig({
    this.multiValue,
    this.bulkMemory,
    this.referenceTypes,
    this.consumeFuel,
    this.wasmi,
    this.wasmtime,
  });
}

class ModuleConfigWasmi {
  /// The limits set on the value stack and call stack.
  final WasiStackLimits? stackLimits;

  /// The amount of Wasm stacks to keep in cache at most.
  final int? cachedStacks;

  /// Is `true` if the `mutable-global` Wasm proposal is enabled.
  final bool? mutableGlobal;

  /// Is `true` if the `sign-extension` Wasm proposal is enabled.
  final bool? signExtension;

  /// Is `true` if the `saturating-float-to-int` Wasm proposal is enabled.
  final bool? saturatingFloatToInt;

  /// Is `true` if the [`tail-call`] Wasm proposal is enabled.
  final bool? tailCall;

  /// Is `true` if the [`extended-const`] Wasm proposal is enabled.
  final bool? extendedConst;

  /// Is `true` if Wasm instructions on `f32` and `f64` types are allowed.
  final bool? floats;

  const ModuleConfigWasmi({
    this.stackLimits,
    this.cachedStacks,
    this.mutableGlobal,
    this.signExtension,
    this.saturatingFloatToInt,
    this.tailCall,
    this.extendedConst,
    this.floats,
  });
}

class ModuleConfigWasmtime {
  /// Configures whether DWARF debug information will be emitted during
  /// compilation.
  final bool? debugInfo;
  final bool? wasmBacktrace;
  final bool? nativeUnwindInfo;
  final int? maxWasmStack;

  /// Whether or not to enable the `threads` WebAssembly feature.
  /// This includes atomics and shared memory as well.
  /// This is not enabled by default.
  final bool? wasmThreads;

  /// Whether or not to enable the `simd` WebAssembly feature.
  final bool? wasmSimd;

  /// Whether or not to enable the `relaxed-simd` WebAssembly feature.
  /// This is not enabled by default.
  final bool? wasmRelaxedSimd;

  /// Whether [wasm_relaxed_simd] should be deterministic.
  /// This is false by default.
  final bool? relaxedSimdDeterministic;

  /// Whether or not to enable the `multi-memory` WebAssembly feature.
  /// This is not enabled by default.
  final bool? wasmMultiMemory;

  /// Whether or not to enable the `memory64` WebAssembly feature.
  /// This is not enabled by default.
  final bool? wasmMemory64;
  final int? staticMemoryMaximumSize;
  final bool? staticMemoryForced;
  final int? staticMemoryGuardSize;
  final bool? parallelCompilation;
  final bool? generateAddressMap;

  const ModuleConfigWasmtime({
    this.debugInfo,
    this.wasmBacktrace,
    this.nativeUnwindInfo,
    this.maxWasmStack,
    this.wasmThreads,
    this.wasmSimd,
    this.wasmRelaxedSimd,
    this.relaxedSimdDeterministic,
    this.wasmMultiMemory,
    this.wasmMemory64,
    this.staticMemoryMaximumSize,
    this.staticMemoryForced,
    this.staticMemoryGuardSize,
    this.parallelCompilation,
    this.generateAddressMap,
  });
}

class ModuleExportDesc {
  final String name;
  final ExternalType ty;

  const ModuleExportDesc({
    required this.name,
    required this.ty,
  });
}

class ModuleExportValue {
  final ModuleExportDesc desc;
  final ExternalValue value;

  const ModuleExportValue({
    required this.desc,
    required this.value,
  });
}

class ModuleImport {
  final String module;
  final String name;
  final ExternalValue value;

  const ModuleImport({
    required this.module,
    required this.name,
    required this.value,
  });
}

class ModuleImportDesc {
  final String module;
  final String name;
  final ExternalType ty;

  const ModuleImportDesc({
    required this.module,
    required this.name,
    required this.ty,
  });
}

/// A preopened directory that the WASM module will be able to access
class PreopenedDir {
  /// The path inside the WASM module.
  /// Should be "/" separated, if you are on windows, you will need to convert the path
  final String wasmGuestPath;

  /// The path on the host that the WASM module will be able to access
  /// and corresponds to the [wasm_guest_path]
  final String hostPath;

  const PreopenedDir({
    required this.wasmGuestPath,
    required this.hostPath,
  });
}

enum StdIOKind {
  stdout,
  stderr,
}

class TableArgs {
  /// The minimum number of elements the [`Table`] must have.
  final int min;

  /// The optional maximum number of elements the [`Table`] can have.
  ///
  /// If this is `None` then the [`Table`] is not limited in size.
  final int? max;

  const TableArgs({
    required this.min,
    this.max,
  });
}

class TableTy {
  /// The type of values stored in the [WasmTable].
  final ValueTy element;

  /// The minimum number of elements the [WasmTable] must have.
  final int min;

  /// The optional maximum number of elements the [WasmTable] can have.
  ///
  /// If this is `None` then the [WasmTable] is not limited in size.
  final int? max;

  const TableTy({
    required this.element,
    required this.min,
    this.max,
  });
}

class U8Array16 extends NonGrowableListView<int> {
  static const arraySize = 16;
  U8Array16(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array16.unchecked(Uint8List inner) : super(inner);
  U8Array16.init() : super(Uint8List(arraySize));
}

enum ValueTy {
  /// 32-bit signed or unsigned integer.
  i32,

  /// 64-bit signed or unsigned integer.
  i64,

  /// 32-bit IEEE 754-2008 floating point number.
  f32,

  /// 64-bit IEEE 754-2008 floating point number.
  f64,

  /// A 128 bit number.
  v128,

  /// A nullable function reference.
  funcRef,

  /// A nullable external reference.
  externRef,
}

class WasiConfigNative {
  /// Whether to capture stdout.
  /// If this is true, you can use the [WasmInstance.stdout]
  /// getter to retrieve a stream of the module's stdout.
  final bool captureStdout;

  /// Whether to capture stderr
  /// If this is true, you can use the [WasmInstance.stderr]
  /// getter to retrieve a stream of the module's stderr.
  final bool captureStderr;

  /// Whether to inherit stdin from the host process.
  final bool inheritStdin;

  /// Whether to inherit environment variables from the host process.
  final bool inheritEnv;

  /// Whether to inherit the process arguments from the host process.
  final bool inheritArgs;

  /// Custom process arguments to pass to the WASM module
  final List<String> args;

  /// Custom Environment variables to pass to the WASM module
  final List<EnvVariable> env;

  /// Custom preopened files to pass to the WASM module
  final List<String> preopenedFiles;

  /// Custom preopened directories to pass to the WASM module
  /// The module will be able to access and edit these directories
  final List<PreopenedDir> preopenedDirs;

  const WasiConfigNative({
    required this.captureStdout,
    required this.captureStderr,
    required this.inheritStdin,
    required this.inheritEnv,
    required this.inheritArgs,
    required this.args,
    required this.env,
    required this.preopenedFiles,
    required this.preopenedDirs,
  });
}

/// The configured limits of the Wasm stack.
class WasiStackLimits {
  /// The initial value stack height that the Wasm stack prepares.
  final int initialValueStackHeight;

  /// The maximum value stack height in use that the Wasm stack allows.
  final int maximumValueStackHeight;

  /// The maximum number of nested calls that the Wasm stack allows.
  final int maximumRecursionDepth;

  const WasiStackLimits({
    required this.initialValueStackHeight,
    required this.maximumValueStackHeight,
    required this.maximumRecursionDepth,
  });
}

/// https://docs.wasmtime.dev/stability-wasm-proposals-support.html
class WasmFeatures {
  /// The WebAssembly `mutable-global` proposal (enabled by default)
  final bool mutableGlobal;

  /// The WebAssembly `nontrapping-float-to-int-conversions` proposal (enabled by default)
  final bool saturatingFloatToInt;

  /// The WebAssembly `sign-extension-ops` proposal (enabled by default)
  final bool signExtension;

  /// The WebAssembly reference types proposal (enabled by default)
  final bool referenceTypes;

  /// The WebAssembly multi-value proposal (enabled by default)
  final bool multiValue;

  /// The WebAssembly bulk memory operations proposal (enabled by default)
  final bool bulkMemory;

  /// The WebAssembly SIMD proposal
  final bool simd;

  /// The WebAssembly Relaxed SIMD proposal
  final bool relaxedSimd;

  /// The WebAssembly threads proposal, shared memory and atomics
  /// https://docs.rs/wasmtime/8.0.0/wasmtime/struct.Config.html#method.wasm_threads
  final bool threads;

  /// The WebAssembly tail-call proposal
  final bool tailCall;

  /// Whether or not floating-point instructions are enabled.
  ///
  /// This is enabled by default can be used to disallow floating-point
  /// operators and types.
  ///
  /// This does not correspond to a WebAssembly proposal but is instead
  /// intended for embeddings which have stricter-than-usual requirements
  /// about execution. Floats in WebAssembly can have different NaN patterns
  /// across hosts which can lead to host-dependent execution which some
  /// runtimes may not desire.
  final bool floats;

  /// The WebAssembly multi memory proposal
  final bool multiMemory;

  /// The WebAssembly exception handling proposal
  final bool exceptions;

  /// The WebAssembly memory64 proposal
  final bool memory64;

  /// The WebAssembly extended_const proposal
  final bool extendedConst;

  /// The WebAssembly component model proposal
  final bool componentModel;

  /// The WebAssembly memory control proposal
  final bool memoryControl;

  /// The WebAssembly garbage collection (GC) proposal
  final bool garbageCollection;

  /// The WebAssembly System Interface proposal
  final WasmWasiFeatures? wasiFeatures;

  const WasmFeatures({
    required this.mutableGlobal,
    required this.saturatingFloatToInt,
    required this.signExtension,
    required this.referenceTypes,
    required this.multiValue,
    required this.bulkMemory,
    required this.simd,
    required this.relaxedSimd,
    required this.threads,
    required this.tailCall,
    required this.floats,
    required this.multiMemory,
    required this.exceptions,
    required this.memory64,
    required this.extendedConst,
    required this.componentModel,
    required this.memoryControl,
    required this.garbageCollection,
    this.wasiFeatures,
  });
}

class WasmRuntimeFeatures {
  /// The name of the runtime.
  /// For example, "wasmi" or "wasmtime".
  final String name;

  /// The version of the runtime.
  /// For example, "0.29.0" or "8.0.0".
  final String version;

  /// Is `true` if the runtime is the one provided by the browser.
  final bool isBrowser;

  /// The features supported by the runtime.
  final WasmFeatures supportedFeatures;

  /// The default features of the runtime.
  /// If a feature is supported, but it is not enable by default,
  /// then it must be enabled manually, perhaps with [ModuleConfig],
  /// and it may be experimental.
  final WasmFeatures defaultFeatures;

  const WasmRuntimeFeatures({
    required this.name,
    required this.version,
    required this.isBrowser,
    required this.supportedFeatures,
    required this.defaultFeatures,
  });
}

@freezed
class WasmVal with _$WasmVal {
  /// Value of 32-bit signed or unsigned integer.
  const factory WasmVal.i32(
    int field0,
  ) = WasmVal_i32;

  /// Value of 64-bit signed or unsigned integer.
  const factory WasmVal.i64(
    int field0,
  ) = WasmVal_i64;

  /// Value of 32-bit IEEE 754-2008 floating point number.
  const factory WasmVal.f32(
    double field0,
  ) = WasmVal_f32;

  /// Value of 64-bit IEEE 754-2008 floating point number.
  const factory WasmVal.f64(
    double field0,
  ) = WasmVal_f64;

  /// A 128 bit number.
  const factory WasmVal.v128(
    U8Array16 field0,
  ) = WasmVal_v128;

  /// A nullable function.
  const factory WasmVal.funcRef([
    WFunc? field0,
  ]) = WasmVal_funcRef;

  /// A nullable external object reference.
  const factory WasmVal.externRef([
    int? field0,
  ]) = WasmVal_externRef;
}

/// https://docs.wasmtime.dev/stability-wasi-proposals-support.html
class WasmWasiFeatures {
  /// Access to standard input, output, and error streams
  final bool io;

  /// Access to the filesystem
  final bool filesystem;

  /// Access to clocks and the system time
  final bool clocks;

  /// Access to random number generators
  final bool random;
  final bool poll;

  /// wasi-nn
  final bool machineLearning;

  /// wasi-crypto
  final bool crypto;

  /// WASM threads with ability to spawn
  /// https://github.com/WebAssembly/wasi-threads
  final bool threads;

  const WasmWasiFeatures({
    required this.io,
    required this.filesystem,
    required this.clocks,
    required this.random,
    required this.poll,
    required this.machineLearning,
    required this.crypto,
    required this.threads,
  });
}

class WasmitInstanceId {
  final WasmitDart bridge;
  final int field0;

  const WasmitInstanceId({
    required this.bridge,
    required this.field0,
  });

  List<ModuleExportValue> exports({dynamic hint}) =>
      bridge.exportsMethodWasmitInstanceId(
        that: this,
      );
}

class WasmitModuleId {
  final WasmitDart bridge;
  final int field0;

  const WasmitModuleId({
    required this.bridge,
    required this.field0,
  });

  WasmitInstanceId instantiateSync({dynamic hint}) =>
      bridge.instantiateSyncMethodWasmitModuleId(
        that: this,
      );

  Future<WasmitInstanceId> instantiate({dynamic hint}) =>
      bridge.instantiateMethodWasmitModuleId(
        that: this,
      );

  void linkImports({required List<ModuleImport> imports, dynamic hint}) =>
      bridge.linkImportsMethodWasmitModuleId(
        that: this,
        imports: imports,
      );

  Stream<Uint8List> stdioStream({required StdIOKind kind, dynamic hint}) =>
      bridge.stdioStreamMethodWasmitModuleId(
        that: this,
        kind: kind,
      );

  Future<void> dispose({dynamic hint}) => bridge.disposeMethodWasmitModuleId(
        that: this,
      );

  List<WasmVal> callFunctionHandleSync(
          {required WFunc func, required List<WasmVal> args, dynamic hint}) =>
      bridge.callFunctionHandleSyncMethodWasmitModuleId(
        that: this,
        func: func,
        args: args,
      );

  Future<List<WasmVal>> callFunctionHandle(
          {required WFunc func, required List<WasmVal> args, dynamic hint}) =>
      bridge.callFunctionHandleMethodWasmitModuleId(
        that: this,
        func: func,
        args: args,
      );

  FuncTy getFunctionType({required WFunc func, dynamic hint}) =>
      bridge.getFunctionTypeMethodWasmitModuleId(
        that: this,
        func: func,
      );

  WFunc createFunction(
          {required int functionPointer,
          required int functionId,
          required List<ValueTy> paramTypes,
          required List<ValueTy> resultTypes,
          dynamic hint}) =>
      bridge.createFunctionMethodWasmitModuleId(
        that: this,
        functionPointer: functionPointer,
        functionId: functionId,
        paramTypes: paramTypes,
        resultTypes: resultTypes,
      );

  Memory createMemory({required MemoryTy memoryType, dynamic hint}) =>
      bridge.createMemoryMethodWasmitModuleId(
        that: this,
        memoryType: memoryType,
      );

  Global createGlobal(
          {required WasmVal value,
          required GlobalMutability mutability,
          dynamic hint}) =>
      bridge.createGlobalMethodWasmitModuleId(
        that: this,
        value: value,
        mutability: mutability,
      );

  Table createTable(
          {required WasmVal value,
          required TableArgs tableType,
          dynamic hint}) =>
      bridge.createTableMethodWasmitModuleId(
        that: this,
        value: value,
        tableType: tableType,
      );

  GlobalTy getGlobalType({required Global global, dynamic hint}) =>
      bridge.getGlobalTypeMethodWasmitModuleId(
        that: this,
        global: global,
      );

  WasmVal getGlobalValue({required Global global, dynamic hint}) =>
      bridge.getGlobalValueMethodWasmitModuleId(
        that: this,
        global: global,
      );

  void setGlobalValue(
          {required Global global, required WasmVal value, dynamic hint}) =>
      bridge.setGlobalValueMethodWasmitModuleId(
        that: this,
        global: global,
        value: value,
      );

  MemoryTy getMemoryType({required Memory memory, dynamic hint}) =>
      bridge.getMemoryTypeMethodWasmitModuleId(
        that: this,
        memory: memory,
      );

  Uint8List getMemoryData({required Memory memory, dynamic hint}) =>
      bridge.getMemoryDataMethodWasmitModuleId(
        that: this,
        memory: memory,
      );

  Uint8List readMemory(
          {required Memory memory,
          required int offset,
          required int bytes,
          dynamic hint}) =>
      bridge.readMemoryMethodWasmitModuleId(
        that: this,
        memory: memory,
        offset: offset,
        bytes: bytes,
      );

  int getMemoryPages({required Memory memory, dynamic hint}) =>
      bridge.getMemoryPagesMethodWasmitModuleId(
        that: this,
        memory: memory,
      );

  void writeMemory(
          {required Memory memory,
          required int offset,
          required Uint8List buffer,
          dynamic hint}) =>
      bridge.writeMemoryMethodWasmitModuleId(
        that: this,
        memory: memory,
        offset: offset,
        buffer: buffer,
      );

  int growMemory({required Memory memory, required int pages, dynamic hint}) =>
      bridge.growMemoryMethodWasmitModuleId(
        that: this,
        memory: memory,
        pages: pages,
      );

  int getTableSize({required Table table, dynamic hint}) =>
      bridge.getTableSizeMethodWasmitModuleId(
        that: this,
        table: table,
      );

  TableTy getTableType({required Table table, dynamic hint}) =>
      bridge.getTableTypeMethodWasmitModuleId(
        that: this,
        table: table,
      );

  int growTable(
          {required Table table,
          required int delta,
          required WasmVal value,
          dynamic hint}) =>
      bridge.growTableMethodWasmitModuleId(
        that: this,
        table: table,
        delta: delta,
        value: value,
      );

  WasmVal? getTable({required Table table, required int index, dynamic hint}) =>
      bridge.getTableMethodWasmitModuleId(
        that: this,
        table: table,
        index: index,
      );

  void setTable(
          {required Table table,
          required int index,
          required WasmVal value,
          dynamic hint}) =>
      bridge.setTableMethodWasmitModuleId(
        that: this,
        table: table,
        index: index,
        value: value,
      );

  void fillTable(
          {required Table table,
          required int index,
          required WasmVal value,
          required int len,
          dynamic hint}) =>
      bridge.fillTableMethodWasmitModuleId(
        that: this,
        table: table,
        index: index,
        value: value,
        len: len,
      );

  void addFuel({required int delta, dynamic hint}) =>
      bridge.addFuelMethodWasmitModuleId(
        that: this,
        delta: delta,
      );

  int? fuelConsumed({dynamic hint}) => bridge.fuelConsumedMethodWasmitModuleId(
        that: this,
      );

  int consumeFuel({required int delta, dynamic hint}) =>
      bridge.consumeFuelMethodWasmitModuleId(
        that: this,
        delta: delta,
      );
}

class WasmitDartImpl implements WasmitDart {
  final WasmitDartPlatform _platform;
  factory WasmitDartImpl(ExternalLibrary dylib) =>
      WasmitDartImpl.raw(WasmitDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory WasmitDartImpl.wasm(FutureOr<WasmModule> module) =>
      WasmitDartImpl(module as ExternalLibrary);
  WasmitDartImpl.raw(this._platform);
  Memory createSharedMemory({required CompiledModule module, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(module);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_create_shared_memory(arg0),
      parseSuccessData: _wire2api_Memory,
      constMeta: kCreateSharedMemoryConstMeta,
      argValues: [module],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateSharedMemoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_shared_memory",
        argNames: ["module"],
      );

  WasmitModuleId moduleBuilder(
      {required CompiledModule module,
      WasiConfigNative? wasiConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(module);
    var arg1 =
        _platform.api2wire_opt_box_autoadd_wasi_config_native(wasiConfig);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_module_builder(arg0, arg1),
      parseSuccessData: _wire2api_wasmit_module_id,
      constMeta: kModuleBuilderConstMeta,
      argValues: [module, wasiConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kModuleBuilderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "module_builder",
        argNames: ["module", "wasiConfig"],
      );

  Future<Uint8List> parseWatFormat({required String wat, dynamic hint}) {
    var arg0 = _platform.api2wire_String(wat);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_wat_format(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kParseWatFormatConstMeta,
      argValues: [wat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_wat_format",
        argNames: ["wat"],
      );

  Future<CompiledModule> compileWasm(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    var arg1 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_compile_wasm(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_compiled_module(d),
      constMeta: kCompileWasmConstMeta,
      argValues: [moduleWasm, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm",
        argNames: ["moduleWasm", "config"],
      );

  CompiledModule compileWasmSync(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    var arg1 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_compile_wasm_sync(arg0, arg1),
      parseSuccessData: _wire2api_compiled_module,
      constMeta: kCompileWasmSyncConstMeta,
      argValues: [moduleWasm, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm_sync",
        argNames: ["moduleWasm", "config"],
      );

  WasmFeatures wasmFeaturesForConfig(
      {required ModuleConfig config, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_wasm_features_for_config(arg0),
      parseSuccessData: _wire2api_wasm_features,
      constMeta: kWasmFeaturesForConfigConstMeta,
      argValues: [config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWasmFeaturesForConfigConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "wasm_features_for_config",
        argNames: ["config"],
      );

  WasmRuntimeFeatures wasmRuntimeFeatures({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_wasm_runtime_features(),
      parseSuccessData: _wire2api_wasm_runtime_features,
      constMeta: kWasmRuntimeFeaturesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWasmRuntimeFeaturesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "wasm_runtime_features",
        argNames: [],
      );

  List<ModuleExportValue> exportsMethodWasmitInstanceId(
      {required WasmitInstanceId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_instance_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_exports__method__WasmitInstanceId(arg0),
      parseSuccessData: _wire2api_list_module_export_value,
      constMeta: kExportsMethodWasmitInstanceIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExportsMethodWasmitInstanceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "exports__method__WasmitInstanceId",
        argNames: ["that"],
      );

  WasmitInstanceId instantiateSyncMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_instantiate_sync__method__WasmitModuleId(arg0),
      parseSuccessData: _wire2api_wasmit_instance_id,
      constMeta: kInstantiateSyncMethodWasmitModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kInstantiateSyncMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "instantiate_sync__method__WasmitModuleId",
            argNames: ["that"],
          );

  Future<WasmitInstanceId> instantiateMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_instantiate__method__WasmitModuleId(port_, arg0),
      parseSuccessData: (d) => _wire2api_wasmit_instance_id(d),
      constMeta: kInstantiateMethodWasmitModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kInstantiateMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "instantiate__method__WasmitModuleId",
            argNames: ["that"],
          );

  void linkImportsMethodWasmitModuleId(
      {required WasmitModuleId that,
      required List<ModuleImport> imports,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_list_module_import(imports);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_link_imports__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kLinkImportsMethodWasmitModuleIdConstMeta,
      argValues: [that, imports],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kLinkImportsMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "link_imports__method__WasmitModuleId",
            argNames: ["that", "imports"],
          );

  Stream<Uint8List> stdioStreamMethodWasmitModuleId(
      {required WasmitModuleId that, required StdIOKind kind, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = api2wire_std_io_kind(kind);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_stdio_stream__method__WasmitModuleId(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kStdioStreamMethodWasmitModuleIdConstMeta,
      argValues: [that, kind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kStdioStreamMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "stdio_stream__method__WasmitModuleId",
            argNames: ["that", "kind"],
          );

  Future<void> disposeMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dispose__method__WasmitModuleId(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisposeMethodWasmitModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisposeMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dispose__method__WasmitModuleId",
        argNames: ["that"],
      );

  List<WasmVal> callFunctionHandleSyncMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_WFunc(func);
    var arg2 = _platform.api2wire_list_wasm_val(args);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_call_function_handle_sync__method__WasmitModuleId(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_wasm_val,
      constMeta: kCallFunctionHandleSyncMethodWasmitModuleIdConstMeta,
      argValues: [that, func, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleSyncMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle_sync__method__WasmitModuleId",
            argNames: ["that", "func", "args"],
          );

  Future<List<WasmVal>> callFunctionHandleMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_WFunc(func);
    var arg2 = _platform.api2wire_list_wasm_val(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function_handle__method__WasmitModuleId(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_wasm_val,
      constMeta: kCallFunctionHandleMethodWasmitModuleIdConstMeta,
      argValues: [that, func, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle__method__WasmitModuleId",
            argNames: ["that", "func", "args"],
          );

  FuncTy getFunctionTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required WFunc func, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_WFunc(func);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_function_type__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_func_ty,
      constMeta: kGetFunctionTypeMethodWasmitModuleIdConstMeta,
      argValues: [that, func],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetFunctionTypeMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_function_type__method__WasmitModuleId",
            argNames: ["that", "func"],
          );

  WFunc createFunctionMethodWasmitModuleId(
      {required WasmitModuleId that,
      required int functionPointer,
      required int functionId,
      required List<ValueTy> paramTypes,
      required List<ValueTy> resultTypes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = api2wire_usize(functionPointer);
    var arg2 = api2wire_u32(functionId);
    var arg3 = _platform.api2wire_list_value_ty(paramTypes);
    var arg4 = _platform.api2wire_list_value_ty(resultTypes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_function__method__WasmitModuleId(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_WFunc,
      constMeta: kCreateFunctionMethodWasmitModuleIdConstMeta,
      argValues: [that, functionPointer, functionId, paramTypes, resultTypes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateFunctionMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_function__method__WasmitModuleId",
            argNames: [
              "that",
              "functionPointer",
              "functionId",
              "paramTypes",
              "resultTypes"
            ],
          );

  Memory createMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required MemoryTy memoryType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_memory_ty(memoryType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_memory__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_Memory,
      constMeta: kCreateMemoryMethodWasmitModuleIdConstMeta,
      argValues: [that, memoryType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateMemoryMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_memory__method__WasmitModuleId",
            argNames: ["that", "memoryType"],
          );

  Global createGlobalMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WasmVal value,
      required GlobalMutability mutability,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_wasm_val(value);
    var arg2 = api2wire_global_mutability(mutability);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_global__method__WasmitModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_Global,
      constMeta: kCreateGlobalMethodWasmitModuleIdConstMeta,
      argValues: [that, value, mutability],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateGlobalMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_global__method__WasmitModuleId",
            argNames: ["that", "value", "mutability"],
          );

  Table createTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required WasmVal value,
      required TableArgs tableType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_wasm_val(value);
    var arg2 = _platform.api2wire_box_autoadd_table_args(tableType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_table__method__WasmitModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_Table,
      constMeta: kCreateTableMethodWasmitModuleIdConstMeta,
      argValues: [that, value, tableType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateTableMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_table__method__WasmitModuleId",
            argNames: ["that", "value", "tableType"],
          );

  GlobalTy getGlobalTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required Global global, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_global_type__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_global_ty,
      constMeta: kGetGlobalTypeMethodWasmitModuleIdConstMeta,
      argValues: [that, global],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalTypeMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_global_type__method__WasmitModuleId",
            argNames: ["that", "global"],
          );

  WasmVal getGlobalValueMethodWasmitModuleId(
      {required WasmitModuleId that, required Global global, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_global_value__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_wasm_val,
      constMeta: kGetGlobalValueMethodWasmitModuleIdConstMeta,
      argValues: [that, global],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalValueMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_global_value__method__WasmitModuleId",
            argNames: ["that", "global"],
          );

  void setGlobalValueMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Global global,
      required WasmVal value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    var arg2 = _platform.api2wire_box_autoadd_wasm_val(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_global_value__method__WasmitModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetGlobalValueMethodWasmitModuleIdConstMeta,
      argValues: [that, global, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSetGlobalValueMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "set_global_value__method__WasmitModuleId",
            argNames: ["that", "global", "value"],
          );

  MemoryTy getMemoryTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_type__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_memory_ty,
      constMeta: kGetMemoryTypeMethodWasmitModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryTypeMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_type__method__WasmitModuleId",
            argNames: ["that", "memory"],
          );

  Uint8List getMemoryDataMethodWasmitModuleId(
      {required WasmitModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_data__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kGetMemoryDataMethodWasmitModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_data__method__WasmitModuleId",
            argNames: ["that", "memory"],
          );

  Uint8List readMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Memory memory,
      required int offset,
      required int bytes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_usize(offset);
    var arg3 = api2wire_usize(bytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_read_memory__method__WasmitModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kReadMemoryMethodWasmitModuleIdConstMeta,
      argValues: [that, memory, offset, bytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadMemoryMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "read_memory__method__WasmitModuleId",
        argNames: ["that", "memory", "offset", "bytes"],
      );

  int getMemoryPagesMethodWasmitModuleId(
      {required WasmitModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_pages__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kGetMemoryPagesMethodWasmitModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryPagesMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_pages__method__WasmitModuleId",
            argNames: ["that", "memory"],
          );

  void writeMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Memory memory,
      required int offset,
      required Uint8List buffer,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_usize(offset);
    var arg3 = _platform.api2wire_uint_8_list(buffer);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_write_memory__method__WasmitModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kWriteMemoryMethodWasmitModuleIdConstMeta,
      argValues: [that, memory, offset, buffer],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWriteMemoryMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "write_memory__method__WasmitModuleId",
            argNames: ["that", "memory", "offset", "buffer"],
          );

  int growMemoryMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Memory memory,
      required int pages,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_u32(pages);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_grow_memory__method__WasmitModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      constMeta: kGrowMemoryMethodWasmitModuleIdConstMeta,
      argValues: [that, memory, pages],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGrowMemoryMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "grow_memory__method__WasmitModuleId",
        argNames: ["that", "memory", "pages"],
      );

  int getTableSizeMethodWasmitModuleId(
      {required WasmitModuleId that, required Table table, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table_size__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kGetTableSizeMethodWasmitModuleIdConstMeta,
      argValues: [that, table],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTableSizeMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_table_size__method__WasmitModuleId",
            argNames: ["that", "table"],
          );

  TableTy getTableTypeMethodWasmitModuleId(
      {required WasmitModuleId that, required Table table, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table_type__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_table_ty,
      constMeta: kGetTableTypeMethodWasmitModuleIdConstMeta,
      argValues: [that, table],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTableTypeMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_table_type__method__WasmitModuleId",
            argNames: ["that", "table"],
          );

  int growTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int delta,
      required WasmVal value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(delta);
    var arg3 = _platform.api2wire_box_autoadd_wasm_val(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_grow_table__method__WasmitModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_u32,
      constMeta: kGrowTableMethodWasmitModuleIdConstMeta,
      argValues: [that, table, delta, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGrowTableMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "grow_table__method__WasmitModuleId",
        argNames: ["that", "table", "delta", "value"],
      );

  WasmVal? getTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int index,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table__method__WasmitModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_box_autoadd_wasm_val,
      constMeta: kGetTableMethodWasmitModuleIdConstMeta,
      argValues: [that, table, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTableMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_table__method__WasmitModuleId",
        argNames: ["that", "table", "index"],
      );

  void setTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    var arg3 = _platform.api2wire_box_autoadd_wasm_val(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_table__method__WasmitModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetTableMethodWasmitModuleIdConstMeta,
      argValues: [that, table, index, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetTableMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_table__method__WasmitModuleId",
        argNames: ["that", "table", "index", "value"],
      );

  void fillTableMethodWasmitModuleId(
      {required WasmitModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      required int len,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    var arg3 = _platform.api2wire_box_autoadd_wasm_val(value);
    var arg4 = api2wire_u32(len);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_fill_table__method__WasmitModuleId(
          arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kFillTableMethodWasmitModuleIdConstMeta,
      argValues: [that, table, index, value, len],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFillTableMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fill_table__method__WasmitModuleId",
        argNames: ["that", "table", "index", "value", "len"],
      );

  void addFuelMethodWasmitModuleId(
      {required WasmitModuleId that, required int delta, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_u64(delta);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_add_fuel__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddFuelMethodWasmitModuleIdConstMeta,
      argValues: [that, delta],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddFuelMethodWasmitModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_fuel__method__WasmitModuleId",
        argNames: ["that", "delta"],
      );

  int? fuelConsumedMethodWasmitModuleId(
      {required WasmitModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_fuel_consumed__method__WasmitModuleId(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_u64,
      constMeta: kFuelConsumedMethodWasmitModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFuelConsumedMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "fuel_consumed__method__WasmitModuleId",
            argNames: ["that"],
          );

  int consumeFuelMethodWasmitModuleId(
      {required WasmitModuleId that, required int delta, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmit_module_id(that);
    var arg1 = _platform.api2wire_u64(delta);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_consume_fuel__method__WasmitModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u64,
      constMeta: kConsumeFuelMethodWasmitModuleIdConstMeta,
      argValues: [that, delta],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConsumeFuelMethodWasmitModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "consume_fuel__method__WasmitModuleId",
            argNames: ["that", "delta"],
          );

  List<ModuleImportDesc> getModuleImportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_module_imports__method__CompiledModule(arg0),
      parseSuccessData: _wire2api_list_module_import_desc,
      constMeta: kGetModuleImportsMethodCompiledModuleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleImportsMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_imports__method__CompiledModule",
            argNames: ["that"],
          );

  List<ModuleExportDesc> getModuleExportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_module_exports__method__CompiledModule(arg0),
      parseSuccessData: _wire2api_list_module_export_desc,
      constMeta: kGetModuleExportsMethodCompiledModuleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_exports__method__CompiledModule",
            argNames: ["that"],
          );

  DropFnType get dropOpaqueArcStdSyncMutexModule =>
      _platform.inner.drop_opaque_ArcStdSyncMutexModule;
  ShareFnType get shareOpaqueArcStdSyncMutexModule =>
      _platform.inner.share_opaque_ArcStdSyncMutexModule;
  OpaqueTypeFinalizer get ArcStdSyncMutexModuleFinalizer =>
      _platform.ArcStdSyncMutexModuleFinalizer;

  DropFnType get dropOpaqueGlobal => _platform.inner.drop_opaque_Global;
  ShareFnType get shareOpaqueGlobal => _platform.inner.share_opaque_Global;
  OpaqueTypeFinalizer get GlobalFinalizer => _platform.GlobalFinalizer;

  DropFnType get dropOpaqueMemory => _platform.inner.drop_opaque_Memory;
  ShareFnType get shareOpaqueMemory => _platform.inner.share_opaque_Memory;
  OpaqueTypeFinalizer get MemoryFinalizer => _platform.MemoryFinalizer;

  DropFnType get dropOpaqueTable => _platform.inner.drop_opaque_Table;
  ShareFnType get shareOpaqueTable => _platform.inner.share_opaque_Table;
  OpaqueTypeFinalizer get TableFinalizer => _platform.TableFinalizer;

  DropFnType get dropOpaqueWFunc => _platform.inner.drop_opaque_WFunc;
  ShareFnType get shareOpaqueWFunc => _platform.inner.share_opaque_WFunc;
  OpaqueTypeFinalizer get WFuncFinalizer => _platform.WFuncFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcStdSyncMutexModule _wire2api_ArcStdSyncMutexModule(dynamic raw) {
    return ArcStdSyncMutexModule.fromRaw(raw[0], raw[1], this);
  }

  Global _wire2api_Global(dynamic raw) {
    return Global.fromRaw(raw[0], raw[1], this);
  }

  Memory _wire2api_Memory(dynamic raw) {
    return Memory.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Table _wire2api_Table(dynamic raw) {
    return Table.fromRaw(raw[0], raw[1], this);
  }

  WFunc _wire2api_WFunc(dynamic raw) {
    return WFunc.fromRaw(raw[0], raw[1], this);
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  WFunc _wire2api_box_autoadd_WFunc(dynamic raw) {
    return _wire2api_WFunc(raw);
  }

  FuncTy _wire2api_box_autoadd_func_ty(dynamic raw) {
    return _wire2api_func_ty(raw);
  }

  GlobalTy _wire2api_box_autoadd_global_ty(dynamic raw) {
    return _wire2api_global_ty(raw);
  }

  MemoryTy _wire2api_box_autoadd_memory_ty(dynamic raw) {
    return _wire2api_memory_ty(raw);
  }

  TableTy _wire2api_box_autoadd_table_ty(dynamic raw) {
    return _wire2api_table_ty(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  WasmVal _wire2api_box_autoadd_wasm_val(dynamic raw) {
    return _wire2api_wasm_val(raw);
  }

  WasmWasiFeatures _wire2api_box_autoadd_wasm_wasi_features(dynamic raw) {
    return _wire2api_wasm_wasi_features(raw);
  }

  CompiledModule _wire2api_compiled_module(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CompiledModule(
      bridge: this,
      field0: _wire2api_ArcStdSyncMutexModule(arr[0]),
    );
  }

  ExternalType _wire2api_external_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ExternalType_Func(
          _wire2api_box_autoadd_func_ty(raw[1]),
        );
      case 1:
        return ExternalType_Global(
          _wire2api_box_autoadd_global_ty(raw[1]),
        );
      case 2:
        return ExternalType_Table(
          _wire2api_box_autoadd_table_ty(raw[1]),
        );
      case 3:
        return ExternalType_Memory(
          _wire2api_box_autoadd_memory_ty(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ExternalValue _wire2api_external_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ExternalValue_Func(
          _wire2api_WFunc(raw[1]),
        );
      case 1:
        return ExternalValue_Global(
          _wire2api_Global(raw[1]),
        );
      case 2:
        return ExternalValue_Table(
          _wire2api_Table(raw[1]),
        );
      case 3:
        return ExternalValue_Memory(
          _wire2api_Memory(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FuncTy _wire2api_func_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FuncTy(
      params: _wire2api_list_value_ty(arr[0]),
      results: _wire2api_list_value_ty(arr[1]),
    );
  }

  GlobalMutability _wire2api_global_mutability(dynamic raw) {
    return GlobalMutability.values[raw];
  }

  GlobalTy _wire2api_global_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GlobalTy(
      content: _wire2api_value_ty(arr[0]),
      mutability: _wire2api_global_mutability(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<ModuleExportDesc> _wire2api_list_module_export_desc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_export_desc).toList();
  }

  List<ModuleExportValue> _wire2api_list_module_export_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_export_value).toList();
  }

  List<ModuleImportDesc> _wire2api_list_module_import_desc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_import_desc).toList();
  }

  List<ValueTy> _wire2api_list_value_ty(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_value_ty).toList();
  }

  List<WasmVal> _wire2api_list_wasm_val(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_wasm_val).toList();
  }

  MemoryTy _wire2api_memory_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MemoryTy(
      initialPages: _wire2api_u32(arr[0]),
      maximumPages: _wire2api_opt_box_autoadd_u32(arr[1]),
    );
  }

  ModuleExportDesc _wire2api_module_export_desc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModuleExportDesc(
      name: _wire2api_String(arr[0]),
      ty: _wire2api_external_type(arr[1]),
    );
  }

  ModuleExportValue _wire2api_module_export_value(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModuleExportValue(
      desc: _wire2api_module_export_desc(arr[0]),
      value: _wire2api_external_value(arr[1]),
    );
  }

  ModuleImportDesc _wire2api_module_import_desc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ModuleImportDesc(
      module: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      ty: _wire2api_external_type(arr[2]),
    );
  }

  WFunc? _wire2api_opt_box_autoadd_WFunc(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_WFunc(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  WasmVal? _wire2api_opt_box_autoadd_wasm_val(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_wasm_val(raw);
  }

  WasmWasiFeatures? _wire2api_opt_box_autoadd_wasm_wasi_features(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_wasm_wasi_features(raw);
  }

  TableTy _wire2api_table_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TableTy(
      element: _wire2api_value_ty(arr[0]),
      min: _wire2api_u32(arr[1]),
      max: _wire2api_opt_box_autoadd_u32(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array16 _wire2api_u8_array_16(dynamic raw) {
    return U8Array16(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  ValueTy _wire2api_value_ty(dynamic raw) {
    return ValueTy.values[raw];
  }

  WasmFeatures _wire2api_wasm_features(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 19)
      throw Exception('unexpected arr length: expect 19 but see ${arr.length}');
    return WasmFeatures(
      mutableGlobal: _wire2api_bool(arr[0]),
      saturatingFloatToInt: _wire2api_bool(arr[1]),
      signExtension: _wire2api_bool(arr[2]),
      referenceTypes: _wire2api_bool(arr[3]),
      multiValue: _wire2api_bool(arr[4]),
      bulkMemory: _wire2api_bool(arr[5]),
      simd: _wire2api_bool(arr[6]),
      relaxedSimd: _wire2api_bool(arr[7]),
      threads: _wire2api_bool(arr[8]),
      tailCall: _wire2api_bool(arr[9]),
      floats: _wire2api_bool(arr[10]),
      multiMemory: _wire2api_bool(arr[11]),
      exceptions: _wire2api_bool(arr[12]),
      memory64: _wire2api_bool(arr[13]),
      extendedConst: _wire2api_bool(arr[14]),
      componentModel: _wire2api_bool(arr[15]),
      memoryControl: _wire2api_bool(arr[16]),
      garbageCollection: _wire2api_bool(arr[17]),
      wasiFeatures: _wire2api_opt_box_autoadd_wasm_wasi_features(arr[18]),
    );
  }

  WasmRuntimeFeatures _wire2api_wasm_runtime_features(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return WasmRuntimeFeatures(
      name: _wire2api_String(arr[0]),
      version: _wire2api_String(arr[1]),
      isBrowser: _wire2api_bool(arr[2]),
      supportedFeatures: _wire2api_wasm_features(arr[3]),
      defaultFeatures: _wire2api_wasm_features(arr[4]),
    );
  }

  WasmVal _wire2api_wasm_val(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return WasmVal_i32(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return WasmVal_i64(
          _wire2api_i64(raw[1]),
        );
      case 2:
        return WasmVal_f32(
          _wire2api_f32(raw[1]),
        );
      case 3:
        return WasmVal_f64(
          _wire2api_f64(raw[1]),
        );
      case 4:
        return WasmVal_v128(
          _wire2api_u8_array_16(raw[1]),
        );
      case 5:
        return WasmVal_funcRef(
          _wire2api_opt_box_autoadd_WFunc(raw[1]),
        );
      case 6:
        return WasmVal_externRef(
          _wire2api_opt_box_autoadd_u32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  WasmWasiFeatures _wire2api_wasm_wasi_features(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return WasmWasiFeatures(
      io: _wire2api_bool(arr[0]),
      filesystem: _wire2api_bool(arr[1]),
      clocks: _wire2api_bool(arr[2]),
      random: _wire2api_bool(arr[3]),
      poll: _wire2api_bool(arr[4]),
      machineLearning: _wire2api_bool(arr[5]),
      crypto: _wire2api_bool(arr[6]),
      threads: _wire2api_bool(arr[7]),
    );
  }

  WasmitInstanceId _wire2api_wasmit_instance_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmitInstanceId(
      bridge: this,
      field0: _wire2api_u32(arr[0]),
    );
  }

  WasmitModuleId _wire2api_wasmit_module_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmitModuleId(
      bridge: this,
      field0: _wire2api_u32(arr[0]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_global_mutability(GlobalMutability raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_std_io_kind(StdIOKind raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_value_ty(ValueTy raw) {
  return api2wire_i32(raw.index);
}

// Section: finalizer

extension WasmitDartImplPlatform on WasmitDartImpl {
  WasmitDartPlatform get platform => _platform;
}
