#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::config::EnvVariable;
use crate::config::ModuleConfig;
use crate::config::ModuleConfigWasmi;
use crate::config::ModuleConfigWasmtime;
use crate::config::PreopenedDir;
use crate::config::StdIOKind;
use crate::config::WasiConfig;
use crate::config::WasiStackLimits;
use crate::config::WasmFeatures;
use crate::config::WasmRuntimeFeatures;
use crate::config::WasmWasiFeatures;
use crate::types::ExternalType;
use crate::types::ExternalValue;
use crate::types::FuncTy;
use crate::types::GlobalMutability;
use crate::types::GlobalTy;
use crate::types::MemoryTy;
use crate::types::ModuleExportDesc;
use crate::types::ModuleExportValue;
use crate::types::ModuleImport;
use crate::types::ModuleImportDesc;
use crate::types::TableArgs;
use crate::types::TableTy;
use crate::types::ValueTy;
use crate::types::WasmVal;

// Section: wire functions

fn wire_create_shared_memory_impl(
    _module: impl Wire2Api<CompiledModule> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "create_shared_memory",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api__module = _module.wire2api();
            create_shared_memory(api__module)
        },
    )
}
fn wire_module_builder_impl(
    module: impl Wire2Api<CompiledModule> + UnwindSafe,
    wasi_config: impl Wire2Api<Option<WasiConfig>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "module_builder",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_module = module.wire2api();
            let api_wasi_config = wasi_config.wire2api();
            module_builder(api_module, api_wasi_config)
        },
    )
}
fn wire_parse_wat_format_impl(port_: MessagePort, wat: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "parse_wat_format",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_wat = wat.wire2api();
            move |task_callback| parse_wat_format(api_wat)
        },
    )
}
fn wire_compile_wasm_impl(
    port_: MessagePort,
    module_wasm: impl Wire2Api<Vec<u8>> + UnwindSafe,
    config: impl Wire2Api<ModuleConfig> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "compile_wasm",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_module_wasm = module_wasm.wire2api();
            let api_config = config.wire2api();
            move |task_callback| compile_wasm(api_module_wasm, api_config)
        },
    )
}
fn wire_compile_wasm_sync_impl(
    module_wasm: impl Wire2Api<Vec<u8>> + UnwindSafe,
    config: impl Wire2Api<ModuleConfig> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "compile_wasm_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_module_wasm = module_wasm.wire2api();
            let api_config = config.wire2api();
            compile_wasm_sync(api_module_wasm, api_config)
        },
    )
}
fn wire_wasm_features_for_config_impl(
    config: impl Wire2Api<ModuleConfig> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "wasm_features_for_config",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_config = config.wire2api();
            Ok(wasm_features_for_config(api_config))
        },
    )
}
fn wire_wasm_runtime_features_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "wasm_runtime_features",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(wasm_runtime_features()),
    )
}
fn wire_exports__method__WasmitInstanceId_impl(
    that: impl Wire2Api<WasmitInstanceId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "exports__method__WasmitInstanceId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Ok(WasmitInstanceId::exports(&api_that))
        },
    )
}
fn wire_instantiate_sync__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "instantiate_sync__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            WasmitModuleId::instantiate_sync(&api_that)
        },
    )
}
fn wire_instantiate__method__WasmitModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "instantiate__method__WasmitModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| WasmitModuleId::instantiate(&api_that)
        },
    )
}
fn wire_link_imports__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    imports: impl Wire2Api<Vec<ModuleImport>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "link_imports__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_imports = imports.wire2api();
            WasmitModuleId::link_imports(&api_that, api_imports)
        },
    )
}
fn wire_stdio_stream__method__WasmitModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    kind: impl Wire2Api<StdIOKind> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stdio_stream__method__WasmitModuleId",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| {
                WasmitModuleId::stdio_stream(&api_that, task_callback.stream_sink(), api_kind)
            }
        },
    )
}
fn wire_dispose__method__WasmitModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dispose__method__WasmitModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| WasmitModuleId::dispose(&api_that)
        },
    )
}
fn wire_call_function_handle_sync__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    func: impl Wire2Api<RustOpaque<WFunc>> + UnwindSafe,
    args: impl Wire2Api<Vec<WasmVal>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "call_function_handle_sync__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_func = func.wire2api();
            let api_args = args.wire2api();
            WasmitModuleId::call_function_handle_sync(&api_that, api_func, api_args)
        },
    )
}
fn wire_call_function_handle__method__WasmitModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    func: impl Wire2Api<RustOpaque<WFunc>> + UnwindSafe,
    args: impl Wire2Api<Vec<WasmVal>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_function_handle__method__WasmitModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_func = func.wire2api();
            let api_args = args.wire2api();
            move |task_callback| WasmitModuleId::call_function_handle(&api_that, api_func, api_args)
        },
    )
}
fn wire_get_function_type__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    func: impl Wire2Api<RustOpaque<WFunc>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_function_type__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_func = func.wire2api();
            Ok(WasmitModuleId::get_function_type(&api_that, api_func))
        },
    )
}
fn wire_create_function__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    function_pointer: impl Wire2Api<usize> + UnwindSafe,
    function_id: impl Wire2Api<u32> + UnwindSafe,
    param_types: impl Wire2Api<Vec<ValueTy>> + UnwindSafe,
    result_types: impl Wire2Api<Vec<ValueTy>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "create_function__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_function_pointer = function_pointer.wire2api();
            let api_function_id = function_id.wire2api();
            let api_param_types = param_types.wire2api();
            let api_result_types = result_types.wire2api();
            WasmitModuleId::create_function(
                &api_that,
                api_function_pointer,
                api_function_id,
                api_param_types,
                api_result_types,
            )
        },
    )
}
fn wire_create_memory__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory_type: impl Wire2Api<MemoryTy> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "create_memory__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory_type = memory_type.wire2api();
            WasmitModuleId::create_memory(&api_that, api_memory_type)
        },
    )
}
fn wire_create_global__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    value: impl Wire2Api<WasmVal> + UnwindSafe,
    mutability: impl Wire2Api<GlobalMutability> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "create_global__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_value = value.wire2api();
            let api_mutability = mutability.wire2api();
            WasmitModuleId::create_global(&api_that, api_value, api_mutability)
        },
    )
}
fn wire_create_table__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    value: impl Wire2Api<WasmVal> + UnwindSafe,
    table_type: impl Wire2Api<TableArgs> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "create_table__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_value = value.wire2api();
            let api_table_type = table_type.wire2api();
            WasmitModuleId::create_table(&api_that, api_value, api_table_type)
        },
    )
}
fn wire_get_global_type__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    global: impl Wire2Api<RustOpaque<Global>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_global_type__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_global = global.wire2api();
            Ok(WasmitModuleId::get_global_type(&api_that, api_global))
        },
    )
}
fn wire_get_global_value__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    global: impl Wire2Api<RustOpaque<Global>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_global_value__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_global = global.wire2api();
            Ok(WasmitModuleId::get_global_value(&api_that, api_global))
        },
    )
}
fn wire_set_global_value__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    global: impl Wire2Api<RustOpaque<Global>> + UnwindSafe,
    value: impl Wire2Api<WasmVal> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "set_global_value__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_global = global.wire2api();
            let api_value = value.wire2api();
            WasmitModuleId::set_global_value(&api_that, api_global, api_value)
        },
    )
}
fn wire_get_memory_type__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory: impl Wire2Api<RustOpaque<Memory>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_memory_type__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory = memory.wire2api();
            Ok(WasmitModuleId::get_memory_type(&api_that, api_memory))
        },
    )
}
fn wire_get_memory_data__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory: impl Wire2Api<RustOpaque<Memory>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_memory_data__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory = memory.wire2api();
            Ok(WasmitModuleId::get_memory_data(&api_that, api_memory))
        },
    )
}
fn wire_read_memory__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory: impl Wire2Api<RustOpaque<Memory>> + UnwindSafe,
    offset: impl Wire2Api<usize> + UnwindSafe,
    bytes: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "read_memory__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory = memory.wire2api();
            let api_offset = offset.wire2api();
            let api_bytes = bytes.wire2api();
            WasmitModuleId::read_memory(&api_that, api_memory, api_offset, api_bytes)
        },
    )
}
fn wire_get_memory_pages__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory: impl Wire2Api<RustOpaque<Memory>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_memory_pages__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory = memory.wire2api();
            Ok(WasmitModuleId::get_memory_pages(&api_that, api_memory))
        },
    )
}
fn wire_write_memory__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory: impl Wire2Api<RustOpaque<Memory>> + UnwindSafe,
    offset: impl Wire2Api<usize> + UnwindSafe,
    buffer: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "write_memory__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory = memory.wire2api();
            let api_offset = offset.wire2api();
            let api_buffer = buffer.wire2api();
            WasmitModuleId::write_memory(&api_that, api_memory, api_offset, api_buffer)
        },
    )
}
fn wire_grow_memory__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    memory: impl Wire2Api<RustOpaque<Memory>> + UnwindSafe,
    pages: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "grow_memory__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_memory = memory.wire2api();
            let api_pages = pages.wire2api();
            WasmitModuleId::grow_memory(&api_that, api_memory, api_pages)
        },
    )
}
fn wire_get_table_size__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    table: impl Wire2Api<RustOpaque<Table>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_table_size__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_table = table.wire2api();
            Ok(WasmitModuleId::get_table_size(&api_that, api_table))
        },
    )
}
fn wire_get_table_type__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    table: impl Wire2Api<RustOpaque<Table>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_table_type__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_table = table.wire2api();
            Ok(WasmitModuleId::get_table_type(&api_that, api_table))
        },
    )
}
fn wire_grow_table__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    table: impl Wire2Api<RustOpaque<Table>> + UnwindSafe,
    delta: impl Wire2Api<u32> + UnwindSafe,
    value: impl Wire2Api<WasmVal> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "grow_table__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_table = table.wire2api();
            let api_delta = delta.wire2api();
            let api_value = value.wire2api();
            WasmitModuleId::grow_table(&api_that, api_table, api_delta, api_value)
        },
    )
}
fn wire_get_table__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    table: impl Wire2Api<RustOpaque<Table>> + UnwindSafe,
    index: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_table__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_table = table.wire2api();
            let api_index = index.wire2api();
            Ok(WasmitModuleId::get_table(&api_that, api_table, api_index))
        },
    )
}
fn wire_set_table__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    table: impl Wire2Api<RustOpaque<Table>> + UnwindSafe,
    index: impl Wire2Api<u32> + UnwindSafe,
    value: impl Wire2Api<WasmVal> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "set_table__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_table = table.wire2api();
            let api_index = index.wire2api();
            let api_value = value.wire2api();
            WasmitModuleId::set_table(&api_that, api_table, api_index, api_value)
        },
    )
}
fn wire_fill_table__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    table: impl Wire2Api<RustOpaque<Table>> + UnwindSafe,
    index: impl Wire2Api<u32> + UnwindSafe,
    value: impl Wire2Api<WasmVal> + UnwindSafe,
    len: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "fill_table__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_table = table.wire2api();
            let api_index = index.wire2api();
            let api_value = value.wire2api();
            let api_len = len.wire2api();
            WasmitModuleId::fill_table(&api_that, api_table, api_index, api_value, api_len)
        },
    )
}
fn wire_add_fuel__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    delta: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "add_fuel__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_delta = delta.wire2api();
            WasmitModuleId::add_fuel(&api_that, api_delta)
        },
    )
}
fn wire_fuel_consumed__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "fuel_consumed__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Ok(WasmitModuleId::fuel_consumed(&api_that))
        },
    )
}
fn wire_consume_fuel__method__WasmitModuleId_impl(
    that: impl Wire2Api<WasmitModuleId> + UnwindSafe,
    delta: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "consume_fuel__method__WasmitModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_delta = delta.wire2api();
            WasmitModuleId::consume_fuel(&api_that, api_delta)
        },
    )
}
fn wire_get_module_imports__method__CompiledModule_impl(
    that: impl Wire2Api<CompiledModule> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_module_imports__method__CompiledModule",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Ok(CompiledModule::get_module_imports(&api_that))
        },
    )
}
fn wire_get_module_exports__method__CompiledModule_impl(
    that: impl Wire2Api<CompiledModule> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_module_exports__method__CompiledModule",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Ok(CompiledModule::get_module_exports(&api_that))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<GlobalMutability> for i32 {
    fn wire2api(self) -> GlobalMutability {
        match self {
            0 => GlobalMutability::Const,
            1 => GlobalMutability::Var,
            _ => unreachable!("Invalid variant for GlobalMutability: {}", self),
        }
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<StdIOKind> for i32 {
    fn wire2api(self) -> StdIOKind {
        match self {
            0 => StdIOKind::stdout,
            1 => StdIOKind::stderr,
            _ => unreachable!("Invalid variant for StdIOKind: {}", self),
        }
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
impl Wire2Api<ValueTy> for i32 {
    fn wire2api(self) -> ValueTy {
        match self {
            0 => ValueTy::i32,
            1 => ValueTy::i64,
            2 => ValueTy::f32,
            3 => ValueTy::f64,
            4 => ValueTy::v128,
            5 => ValueTy::funcRef,
            6 => ValueTy::externRef,
            _ => unreachable!("Invalid variant for ValueTy: {}", self),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for CompiledModule {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CompiledModule {}

impl support::IntoDart for ExternalType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Func(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Global(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::Table(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::Memory(field0) => vec![3.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ExternalType {}
impl support::IntoDart for ExternalValue {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Func(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Global(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::Table(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::Memory(field0) => vec![3.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ExternalValue {}

impl support::IntoDart for FuncTy {
    fn into_dart(self) -> support::DartAbi {
        vec![self.params.into_dart(), self.results.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FuncTy {}

impl support::IntoDart for GlobalMutability {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Const => 0,
            Self::Var => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GlobalMutability {}
impl support::IntoDart for GlobalTy {
    fn into_dart(self) -> support::DartAbi {
        vec![self.content.into_dart(), self.mutability.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GlobalTy {}

impl support::IntoDart for MemoryTy {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.initial_pages.into_dart(),
            self.maximum_pages.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MemoryTy {}

impl support::IntoDart for ModuleExportDesc {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.ty.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ModuleExportDesc {}

impl support::IntoDart for ModuleExportValue {
    fn into_dart(self) -> support::DartAbi {
        vec![self.desc.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ModuleExportValue {}

impl support::IntoDart for ModuleImportDesc {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.module.into_dart(),
            self.name.into_dart(),
            self.ty.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ModuleImportDesc {}

impl support::IntoDart for TableTy {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.element.into_dart(),
            self.min.into_dart(),
            self.max.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TableTy {}

impl support::IntoDart for ValueTy {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::i32 => 0,
            Self::i64 => 1,
            Self::f32 => 2,
            Self::f64 => 3,
            Self::v128 => 4,
            Self::funcRef => 5,
            Self::externRef => 6,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ValueTy {}
impl support::IntoDart for WasmFeatures {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.mutable_global.into_dart(),
            self.saturating_float_to_int.into_dart(),
            self.sign_extension.into_dart(),
            self.reference_types.into_dart(),
            self.multi_value.into_dart(),
            self.bulk_memory.into_dart(),
            self.simd.into_dart(),
            self.relaxed_simd.into_dart(),
            self.threads.into_dart(),
            self.tail_call.into_dart(),
            self.floats.into_dart(),
            self.multi_memory.into_dart(),
            self.exceptions.into_dart(),
            self.memory64.into_dart(),
            self.extended_const.into_dart(),
            self.component_model.into_dart(),
            self.memory_control.into_dart(),
            self.garbage_collection.into_dart(),
            self.wasi_features.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmFeatures {}

impl support::IntoDart for WasmRuntimeFeatures {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_dart(),
            self.version.into_dart(),
            self.is_browser.into_dart(),
            self.supported_features.into_dart(),
            self.default_features.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmRuntimeFeatures {}

impl support::IntoDart for WasmVal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::i32(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::i64(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::f32(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::f64(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::v128(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::funcRef(field0) => vec![5.into_dart(), field0.into_dart()],
            Self::externRef(field0) => vec![6.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmVal {}
impl support::IntoDart for WasmWasiFeatures {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.io.into_dart(),
            self.filesystem.into_dart(),
            self.clocks.into_dart(),
            self.random.into_dart(),
            self.poll.into_dart(),
            self.machine_learning.into_dart(),
            self.crypto.into_dart(),
            self.threads.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmWasiFeatures {}

impl support::IntoDart for WasmitInstanceId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmitInstanceId {}

impl support::IntoDart for WasmitModuleId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmitModuleId {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_create_shared_memory(_module: JsValue) -> support::WireSyncReturn {
        wire_create_shared_memory_impl(_module)
    }

    #[wasm_bindgen]
    pub fn wire_module_builder(module: JsValue, wasi_config: JsValue) -> support::WireSyncReturn {
        wire_module_builder_impl(module, wasi_config)
    }

    #[wasm_bindgen]
    pub fn wire_parse_wat_format(port_: MessagePort, wat: String) {
        wire_parse_wat_format_impl(port_, wat)
    }

    #[wasm_bindgen]
    pub fn wire_compile_wasm(port_: MessagePort, module_wasm: Box<[u8]>, config: JsValue) {
        wire_compile_wasm_impl(port_, module_wasm, config)
    }

    #[wasm_bindgen]
    pub fn wire_compile_wasm_sync(
        module_wasm: Box<[u8]>,
        config: JsValue,
    ) -> support::WireSyncReturn {
        wire_compile_wasm_sync_impl(module_wasm, config)
    }

    #[wasm_bindgen]
    pub fn wire_wasm_features_for_config(config: JsValue) -> support::WireSyncReturn {
        wire_wasm_features_for_config_impl(config)
    }

    #[wasm_bindgen]
    pub fn wire_wasm_runtime_features() -> support::WireSyncReturn {
        wire_wasm_runtime_features_impl()
    }

    #[wasm_bindgen]
    pub fn wire_exports__method__WasmitInstanceId(that: JsValue) -> support::WireSyncReturn {
        wire_exports__method__WasmitInstanceId_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire_instantiate_sync__method__WasmitModuleId(that: JsValue) -> support::WireSyncReturn {
        wire_instantiate_sync__method__WasmitModuleId_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire_instantiate__method__WasmitModuleId(port_: MessagePort, that: JsValue) {
        wire_instantiate__method__WasmitModuleId_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_link_imports__method__WasmitModuleId(
        that: JsValue,
        imports: JsValue,
    ) -> support::WireSyncReturn {
        wire_link_imports__method__WasmitModuleId_impl(that, imports)
    }

    #[wasm_bindgen]
    pub fn wire_stdio_stream__method__WasmitModuleId(port_: MessagePort, that: JsValue, kind: i32) {
        wire_stdio_stream__method__WasmitModuleId_impl(port_, that, kind)
    }

    #[wasm_bindgen]
    pub fn wire_dispose__method__WasmitModuleId(port_: MessagePort, that: JsValue) {
        wire_dispose__method__WasmitModuleId_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_call_function_handle_sync__method__WasmitModuleId(
        that: JsValue,
        func: JsValue,
        args: JsValue,
    ) -> support::WireSyncReturn {
        wire_call_function_handle_sync__method__WasmitModuleId_impl(that, func, args)
    }

    #[wasm_bindgen]
    pub fn wire_call_function_handle__method__WasmitModuleId(
        port_: MessagePort,
        that: JsValue,
        func: JsValue,
        args: JsValue,
    ) {
        wire_call_function_handle__method__WasmitModuleId_impl(port_, that, func, args)
    }

    #[wasm_bindgen]
    pub fn wire_get_function_type__method__WasmitModuleId(
        that: JsValue,
        func: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_function_type__method__WasmitModuleId_impl(that, func)
    }

    #[wasm_bindgen]
    pub fn wire_create_function__method__WasmitModuleId(
        that: JsValue,
        function_pointer: usize,
        function_id: u32,
        param_types: JsValue,
        result_types: JsValue,
    ) -> support::WireSyncReturn {
        wire_create_function__method__WasmitModuleId_impl(
            that,
            function_pointer,
            function_id,
            param_types,
            result_types,
        )
    }

    #[wasm_bindgen]
    pub fn wire_create_memory__method__WasmitModuleId(
        that: JsValue,
        memory_type: JsValue,
    ) -> support::WireSyncReturn {
        wire_create_memory__method__WasmitModuleId_impl(that, memory_type)
    }

    #[wasm_bindgen]
    pub fn wire_create_global__method__WasmitModuleId(
        that: JsValue,
        value: JsValue,
        mutability: i32,
    ) -> support::WireSyncReturn {
        wire_create_global__method__WasmitModuleId_impl(that, value, mutability)
    }

    #[wasm_bindgen]
    pub fn wire_create_table__method__WasmitModuleId(
        that: JsValue,
        value: JsValue,
        table_type: JsValue,
    ) -> support::WireSyncReturn {
        wire_create_table__method__WasmitModuleId_impl(that, value, table_type)
    }

    #[wasm_bindgen]
    pub fn wire_get_global_type__method__WasmitModuleId(
        that: JsValue,
        global: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_global_type__method__WasmitModuleId_impl(that, global)
    }

    #[wasm_bindgen]
    pub fn wire_get_global_value__method__WasmitModuleId(
        that: JsValue,
        global: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_global_value__method__WasmitModuleId_impl(that, global)
    }

    #[wasm_bindgen]
    pub fn wire_set_global_value__method__WasmitModuleId(
        that: JsValue,
        global: JsValue,
        value: JsValue,
    ) -> support::WireSyncReturn {
        wire_set_global_value__method__WasmitModuleId_impl(that, global, value)
    }

    #[wasm_bindgen]
    pub fn wire_get_memory_type__method__WasmitModuleId(
        that: JsValue,
        memory: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_memory_type__method__WasmitModuleId_impl(that, memory)
    }

    #[wasm_bindgen]
    pub fn wire_get_memory_data__method__WasmitModuleId(
        that: JsValue,
        memory: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_memory_data__method__WasmitModuleId_impl(that, memory)
    }

    #[wasm_bindgen]
    pub fn wire_read_memory__method__WasmitModuleId(
        that: JsValue,
        memory: JsValue,
        offset: usize,
        bytes: usize,
    ) -> support::WireSyncReturn {
        wire_read_memory__method__WasmitModuleId_impl(that, memory, offset, bytes)
    }

    #[wasm_bindgen]
    pub fn wire_get_memory_pages__method__WasmitModuleId(
        that: JsValue,
        memory: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_memory_pages__method__WasmitModuleId_impl(that, memory)
    }

    #[wasm_bindgen]
    pub fn wire_write_memory__method__WasmitModuleId(
        that: JsValue,
        memory: JsValue,
        offset: usize,
        buffer: Box<[u8]>,
    ) -> support::WireSyncReturn {
        wire_write_memory__method__WasmitModuleId_impl(that, memory, offset, buffer)
    }

    #[wasm_bindgen]
    pub fn wire_grow_memory__method__WasmitModuleId(
        that: JsValue,
        memory: JsValue,
        pages: u32,
    ) -> support::WireSyncReturn {
        wire_grow_memory__method__WasmitModuleId_impl(that, memory, pages)
    }

    #[wasm_bindgen]
    pub fn wire_get_table_size__method__WasmitModuleId(
        that: JsValue,
        table: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_table_size__method__WasmitModuleId_impl(that, table)
    }

    #[wasm_bindgen]
    pub fn wire_get_table_type__method__WasmitModuleId(
        that: JsValue,
        table: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_table_type__method__WasmitModuleId_impl(that, table)
    }

    #[wasm_bindgen]
    pub fn wire_grow_table__method__WasmitModuleId(
        that: JsValue,
        table: JsValue,
        delta: u32,
        value: JsValue,
    ) -> support::WireSyncReturn {
        wire_grow_table__method__WasmitModuleId_impl(that, table, delta, value)
    }

    #[wasm_bindgen]
    pub fn wire_get_table__method__WasmitModuleId(
        that: JsValue,
        table: JsValue,
        index: u32,
    ) -> support::WireSyncReturn {
        wire_get_table__method__WasmitModuleId_impl(that, table, index)
    }

    #[wasm_bindgen]
    pub fn wire_set_table__method__WasmitModuleId(
        that: JsValue,
        table: JsValue,
        index: u32,
        value: JsValue,
    ) -> support::WireSyncReturn {
        wire_set_table__method__WasmitModuleId_impl(that, table, index, value)
    }

    #[wasm_bindgen]
    pub fn wire_fill_table__method__WasmitModuleId(
        that: JsValue,
        table: JsValue,
        index: u32,
        value: JsValue,
        len: u32,
    ) -> support::WireSyncReturn {
        wire_fill_table__method__WasmitModuleId_impl(that, table, index, value, len)
    }

    #[wasm_bindgen]
    pub fn wire_add_fuel__method__WasmitModuleId(
        that: JsValue,
        delta: u64,
    ) -> support::WireSyncReturn {
        wire_add_fuel__method__WasmitModuleId_impl(that, delta)
    }

    #[wasm_bindgen]
    pub fn wire_fuel_consumed__method__WasmitModuleId(that: JsValue) -> support::WireSyncReturn {
        wire_fuel_consumed__method__WasmitModuleId_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire_consume_fuel__method__WasmitModuleId(
        that: JsValue,
        delta: u64,
    ) -> support::WireSyncReturn {
        wire_consume_fuel__method__WasmitModuleId_impl(that, delta)
    }

    #[wasm_bindgen]
    pub fn wire_get_module_imports__method__CompiledModule(
        that: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_module_imports__method__CompiledModule_impl(that)
    }

    #[wasm_bindgen]
    pub fn wire_get_module_exports__method__CompiledModule(
        that: JsValue,
    ) -> support::WireSyncReturn {
        wire_get_module_exports__method__CompiledModule_impl(that)
    }

    // Section: allocate functions

    // Section: related functions

    #[wasm_bindgen]
    pub fn drop_opaque_ArcStdSyncMutexModule(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<std::sync::Mutex<Module>>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_ArcStdSyncMutexModule(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<std::sync::Mutex<Module>>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_Global(ptr: *const c_void) {
        unsafe {
            Arc::<Global>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_Global(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Global>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_Memory(ptr: *const c_void) {
        unsafe {
            Arc::<Memory>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_Memory(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Memory>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_Table(ptr: *const c_void) {
        unsafe {
            Arc::<Table>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_Table(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Table>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_WFunc(ptr: *const c_void) {
        unsafe {
            Arc::<WFunc>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_WFunc(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<WFunc>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Vec<String>> for JsValue {
        fn wire2api(self) -> Vec<String> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<CompiledModule> for JsValue {
        fn wire2api(self) -> CompiledModule {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            CompiledModule(self_.get(0).wire2api())
        }
    }
    impl Wire2Api<EnvVariable> for JsValue {
        fn wire2api(self) -> EnvVariable {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            EnvVariable {
                name: self_.get(0).wire2api(),
                value: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<ExternalValue> for JsValue {
        fn wire2api(self) -> ExternalValue {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => ExternalValue::Func(self_.get(1).wire2api()),
                1 => ExternalValue::Global(self_.get(1).wire2api()),
                2 => ExternalValue::Table(self_.get(1).wire2api()),
                3 => ExternalValue::Memory(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<Vec<EnvVariable>> for JsValue {
        fn wire2api(self) -> Vec<EnvVariable> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<ModuleImport>> for JsValue {
        fn wire2api(self) -> Vec<ModuleImport> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<PreopenedDir>> for JsValue {
        fn wire2api(self) -> Vec<PreopenedDir> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<ValueTy>> for JsValue {
        fn wire2api(self) -> Vec<ValueTy> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<WasmVal>> for JsValue {
        fn wire2api(self) -> Vec<WasmVal> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<MemoryTy> for JsValue {
        fn wire2api(self) -> MemoryTy {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            MemoryTy {
                initial_pages: self_.get(0).wire2api(),
                maximum_pages: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleConfig> for JsValue {
        fn wire2api(self) -> ModuleConfig {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                6,
                "Expected 6 elements, got {}",
                self_.length()
            );
            ModuleConfig {
                multi_value: self_.get(0).wire2api(),
                bulk_memory: self_.get(1).wire2api(),
                reference_types: self_.get(2).wire2api(),
                consume_fuel: self_.get(3).wire2api(),
                wasmi: self_.get(4).wire2api(),
                wasmtime: self_.get(5).wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleConfigWasmi> for JsValue {
        fn wire2api(self) -> ModuleConfigWasmi {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                8,
                "Expected 8 elements, got {}",
                self_.length()
            );
            ModuleConfigWasmi {
                stack_limits: self_.get(0).wire2api(),
                cached_stacks: self_.get(1).wire2api(),
                mutable_global: self_.get(2).wire2api(),
                sign_extension: self_.get(3).wire2api(),
                saturating_float_to_int: self_.get(4).wire2api(),
                tail_call: self_.get(5).wire2api(),
                extended_const: self_.get(6).wire2api(),
                floats: self_.get(7).wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleConfigWasmtime> for JsValue {
        fn wire2api(self) -> ModuleConfigWasmtime {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                15,
                "Expected 15 elements, got {}",
                self_.length()
            );
            ModuleConfigWasmtime {
                debug_info: self_.get(0).wire2api(),
                wasm_backtrace: self_.get(1).wire2api(),
                native_unwind_info: self_.get(2).wire2api(),
                max_wasm_stack: self_.get(3).wire2api(),
                wasm_threads: self_.get(4).wire2api(),
                wasm_simd: self_.get(5).wire2api(),
                wasm_relaxed_simd: self_.get(6).wire2api(),
                relaxed_simd_deterministic: self_.get(7).wire2api(),
                wasm_multi_memory: self_.get(8).wire2api(),
                wasm_memory64: self_.get(9).wire2api(),
                static_memory_maximum_size: self_.get(10).wire2api(),
                static_memory_forced: self_.get(11).wire2api(),
                static_memory_guard_size: self_.get(12).wire2api(),
                parallel_compilation: self_.get(13).wire2api(),
                generate_address_map: self_.get(14).wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleImport> for JsValue {
        fn wire2api(self) -> ModuleImport {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            ModuleImport {
                module: self_.get(0).wire2api(),
                name: self_.get(1).wire2api(),
                value: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<Option<RustOpaque<WFunc>>> for JsValue {
        fn wire2api(self) -> Option<RustOpaque<WFunc>> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }

    impl Wire2Api<Option<ModuleConfigWasmi>> for JsValue {
        fn wire2api(self) -> Option<ModuleConfigWasmi> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<ModuleConfigWasmtime>> for JsValue {
        fn wire2api(self) -> Option<ModuleConfigWasmtime> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }

    impl Wire2Api<Option<WasiConfig>> for JsValue {
        fn wire2api(self) -> Option<WasiConfig> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<WasiStackLimits>> for JsValue {
        fn wire2api(self) -> Option<WasiStackLimits> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<PreopenedDir> for JsValue {
        fn wire2api(self) -> PreopenedDir {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            PreopenedDir {
                wasm_guest_path: self_.get(0).wire2api(),
                host_path: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<TableArgs> for JsValue {
        fn wire2api(self) -> TableArgs {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            TableArgs {
                min: self_.get(0).wire2api(),
                max: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<[u8; 16]> for Box<[u8]> {
        fn wire2api(self) -> [u8; 16] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }

    impl Wire2Api<WasiConfig> for JsValue {
        fn wire2api(self) -> WasiConfig {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                9,
                "Expected 9 elements, got {}",
                self_.length()
            );
            WasiConfig {
                capture_stdout: self_.get(0).wire2api(),
                capture_stderr: self_.get(1).wire2api(),
                inherit_stdin: self_.get(2).wire2api(),
                inherit_env: self_.get(3).wire2api(),
                inherit_args: self_.get(4).wire2api(),
                args: self_.get(5).wire2api(),
                env: self_.get(6).wire2api(),
                preopened_files: self_.get(7).wire2api(),
                preopened_dirs: self_.get(8).wire2api(),
            }
        }
    }
    impl Wire2Api<WasiStackLimits> for JsValue {
        fn wire2api(self) -> WasiStackLimits {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            WasiStackLimits {
                initial_value_stack_height: self_.get(0).wire2api(),
                maximum_value_stack_height: self_.get(1).wire2api(),
                maximum_recursion_depth: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<WasmVal> for JsValue {
        fn wire2api(self) -> WasmVal {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => WasmVal::i32(self_.get(1).wire2api()),
                1 => WasmVal::i64(self_.get(1).wire2api()),
                2 => WasmVal::f32(self_.get(1).wire2api()),
                3 => WasmVal::f64(self_.get(1).wire2api()),
                4 => WasmVal::v128(self_.get(1).wire2api()),
                5 => WasmVal::funcRef(self_.get(1).wire2api()),
                6 => WasmVal::externRef(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<WasmitInstanceId> for JsValue {
        fn wire2api(self) -> WasmitInstanceId {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            WasmitInstanceId(self_.get(0).wire2api())
        }
    }
    impl Wire2Api<WasmitModuleId> for JsValue {
        fn wire2api(self) -> WasmitModuleId {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            WasmitModuleId(self_.get(0).wire2api())
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<RustOpaque<Arc<std::sync::Mutex<Module>>>> for JsValue {
        fn wire2api(self) -> RustOpaque<Arc<std::sync::Mutex<Module>>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<Global>> for JsValue {
        fn wire2api(self) -> RustOpaque<Global> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<Memory>> for JsValue {
        fn wire2api(self) -> RustOpaque<Memory> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<RustOpaque<Table>> for JsValue {
        fn wire2api(self) -> RustOpaque<Table> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<WFunc>> for JsValue {
        fn wire2api(self) -> RustOpaque<WFunc> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<bool> for JsValue {
        fn wire2api(self) -> bool {
            self.is_truthy()
        }
    }
    impl Wire2Api<f32> for JsValue {
        fn wire2api(self) -> f32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<f64> for JsValue {
        fn wire2api(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<GlobalMutability> for JsValue {
        fn wire2api(self) -> GlobalMutability {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i64> for JsValue {
        fn wire2api(self) -> i64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<Option<bool>> for JsValue {
        fn wire2api(self) -> Option<bool> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<u32>> for JsValue {
        fn wire2api(self) -> Option<u32> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<u64>> for JsValue {
        fn wire2api(self) -> Option<u64> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<usize>> for JsValue {
        fn wire2api(self) -> Option<usize> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<StdIOKind> for JsValue {
        fn wire2api(self) -> StdIOKind {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u64> for JsValue {
        fn wire2api(self) -> u64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<[u8; 16]> for JsValue {
        fn wire2api(self) -> [u8; 16] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
    impl Wire2Api<usize> for JsValue {
        fn wire2api(self) -> usize {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<ValueTy> for JsValue {
        fn wire2api(self) -> ValueTy {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_create_shared_memory(
        _module: *mut wire_CompiledModule,
    ) -> support::WireSyncReturn {
        wire_create_shared_memory_impl(_module)
    }

    #[no_mangle]
    pub extern "C" fn wire_module_builder(
        module: *mut wire_CompiledModule,
        wasi_config: *mut wire_WasiConfig,
    ) -> support::WireSyncReturn {
        wire_module_builder_impl(module, wasi_config)
    }

    #[no_mangle]
    pub extern "C" fn wire_parse_wat_format(port_: i64, wat: *mut wire_uint_8_list) {
        wire_parse_wat_format_impl(port_, wat)
    }

    #[no_mangle]
    pub extern "C" fn wire_compile_wasm(
        port_: i64,
        module_wasm: *mut wire_uint_8_list,
        config: *mut wire_ModuleConfig,
    ) {
        wire_compile_wasm_impl(port_, module_wasm, config)
    }

    #[no_mangle]
    pub extern "C" fn wire_compile_wasm_sync(
        module_wasm: *mut wire_uint_8_list,
        config: *mut wire_ModuleConfig,
    ) -> support::WireSyncReturn {
        wire_compile_wasm_sync_impl(module_wasm, config)
    }

    #[no_mangle]
    pub extern "C" fn wire_wasm_features_for_config(
        config: *mut wire_ModuleConfig,
    ) -> support::WireSyncReturn {
        wire_wasm_features_for_config_impl(config)
    }

    #[no_mangle]
    pub extern "C" fn wire_wasm_runtime_features() -> support::WireSyncReturn {
        wire_wasm_runtime_features_impl()
    }

    #[no_mangle]
    pub extern "C" fn wire_exports__method__WasmitInstanceId(
        that: *mut wire_WasmitInstanceId,
    ) -> support::WireSyncReturn {
        wire_exports__method__WasmitInstanceId_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn wire_instantiate_sync__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
    ) -> support::WireSyncReturn {
        wire_instantiate_sync__method__WasmitModuleId_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn wire_instantiate__method__WasmitModuleId(
        port_: i64,
        that: *mut wire_WasmitModuleId,
    ) {
        wire_instantiate__method__WasmitModuleId_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_link_imports__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        imports: *mut wire_list_module_import,
    ) -> support::WireSyncReturn {
        wire_link_imports__method__WasmitModuleId_impl(that, imports)
    }

    #[no_mangle]
    pub extern "C" fn wire_stdio_stream__method__WasmitModuleId(
        port_: i64,
        that: *mut wire_WasmitModuleId,
        kind: i32,
    ) {
        wire_stdio_stream__method__WasmitModuleId_impl(port_, that, kind)
    }

    #[no_mangle]
    pub extern "C" fn wire_dispose__method__WasmitModuleId(
        port_: i64,
        that: *mut wire_WasmitModuleId,
    ) {
        wire_dispose__method__WasmitModuleId_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_function_handle_sync__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        func: wire_WFunc,
        args: *mut wire_list_wasm_val,
    ) -> support::WireSyncReturn {
        wire_call_function_handle_sync__method__WasmitModuleId_impl(that, func, args)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_function_handle__method__WasmitModuleId(
        port_: i64,
        that: *mut wire_WasmitModuleId,
        func: wire_WFunc,
        args: *mut wire_list_wasm_val,
    ) {
        wire_call_function_handle__method__WasmitModuleId_impl(port_, that, func, args)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_function_type__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        func: wire_WFunc,
    ) -> support::WireSyncReturn {
        wire_get_function_type__method__WasmitModuleId_impl(that, func)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_function__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        function_pointer: usize,
        function_id: u32,
        param_types: *mut wire_list_value_ty,
        result_types: *mut wire_list_value_ty,
    ) -> support::WireSyncReturn {
        wire_create_function__method__WasmitModuleId_impl(
            that,
            function_pointer,
            function_id,
            param_types,
            result_types,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_create_memory__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory_type: *mut wire_MemoryTy,
    ) -> support::WireSyncReturn {
        wire_create_memory__method__WasmitModuleId_impl(that, memory_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_global__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        value: *mut wire_WasmVal,
        mutability: i32,
    ) -> support::WireSyncReturn {
        wire_create_global__method__WasmitModuleId_impl(that, value, mutability)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_table__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        value: *mut wire_WasmVal,
        table_type: *mut wire_TableArgs,
    ) -> support::WireSyncReturn {
        wire_create_table__method__WasmitModuleId_impl(that, value, table_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_global_type__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        global: wire_Global,
    ) -> support::WireSyncReturn {
        wire_get_global_type__method__WasmitModuleId_impl(that, global)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_global_value__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        global: wire_Global,
    ) -> support::WireSyncReturn {
        wire_get_global_value__method__WasmitModuleId_impl(that, global)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_global_value__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        global: wire_Global,
        value: *mut wire_WasmVal,
    ) -> support::WireSyncReturn {
        wire_set_global_value__method__WasmitModuleId_impl(that, global, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_memory_type__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory: wire_Memory,
    ) -> support::WireSyncReturn {
        wire_get_memory_type__method__WasmitModuleId_impl(that, memory)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_memory_data__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory: wire_Memory,
    ) -> support::WireSyncReturn {
        wire_get_memory_data__method__WasmitModuleId_impl(that, memory)
    }

    #[no_mangle]
    pub extern "C" fn wire_read_memory__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory: wire_Memory,
        offset: usize,
        bytes: usize,
    ) -> support::WireSyncReturn {
        wire_read_memory__method__WasmitModuleId_impl(that, memory, offset, bytes)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_memory_pages__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory: wire_Memory,
    ) -> support::WireSyncReturn {
        wire_get_memory_pages__method__WasmitModuleId_impl(that, memory)
    }

    #[no_mangle]
    pub extern "C" fn wire_write_memory__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory: wire_Memory,
        offset: usize,
        buffer: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_write_memory__method__WasmitModuleId_impl(that, memory, offset, buffer)
    }

    #[no_mangle]
    pub extern "C" fn wire_grow_memory__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        memory: wire_Memory,
        pages: u32,
    ) -> support::WireSyncReturn {
        wire_grow_memory__method__WasmitModuleId_impl(that, memory, pages)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_table_size__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        table: wire_Table,
    ) -> support::WireSyncReturn {
        wire_get_table_size__method__WasmitModuleId_impl(that, table)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_table_type__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        table: wire_Table,
    ) -> support::WireSyncReturn {
        wire_get_table_type__method__WasmitModuleId_impl(that, table)
    }

    #[no_mangle]
    pub extern "C" fn wire_grow_table__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        table: wire_Table,
        delta: u32,
        value: *mut wire_WasmVal,
    ) -> support::WireSyncReturn {
        wire_grow_table__method__WasmitModuleId_impl(that, table, delta, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_table__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        table: wire_Table,
        index: u32,
    ) -> support::WireSyncReturn {
        wire_get_table__method__WasmitModuleId_impl(that, table, index)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_table__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        table: wire_Table,
        index: u32,
        value: *mut wire_WasmVal,
    ) -> support::WireSyncReturn {
        wire_set_table__method__WasmitModuleId_impl(that, table, index, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_fill_table__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        table: wire_Table,
        index: u32,
        value: *mut wire_WasmVal,
        len: u32,
    ) -> support::WireSyncReturn {
        wire_fill_table__method__WasmitModuleId_impl(that, table, index, value, len)
    }

    #[no_mangle]
    pub extern "C" fn wire_add_fuel__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        delta: u64,
    ) -> support::WireSyncReturn {
        wire_add_fuel__method__WasmitModuleId_impl(that, delta)
    }

    #[no_mangle]
    pub extern "C" fn wire_fuel_consumed__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
    ) -> support::WireSyncReturn {
        wire_fuel_consumed__method__WasmitModuleId_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn wire_consume_fuel__method__WasmitModuleId(
        that: *mut wire_WasmitModuleId,
        delta: u64,
    ) -> support::WireSyncReturn {
        wire_consume_fuel__method__WasmitModuleId_impl(that, delta)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_module_imports__method__CompiledModule(
        that: *mut wire_CompiledModule,
    ) -> support::WireSyncReturn {
        wire_get_module_imports__method__CompiledModule_impl(that)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_module_exports__method__CompiledModule(
        that: *mut wire_CompiledModule,
    ) -> support::WireSyncReturn {
        wire_get_module_exports__method__CompiledModule_impl(that)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_ArcStdSyncMutexModule() -> wire_ArcStdSyncMutexModule {
        wire_ArcStdSyncMutexModule::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_Global() -> wire_Global {
        wire_Global::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_Memory() -> wire_Memory {
        wire_Memory::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_StringList_0(len: i32) -> *mut wire_StringList {
        let wrap = wire_StringList {
            ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_Table() -> wire_Table {
        wire_Table::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_WFunc() -> wire_WFunc {
        wire_WFunc::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_WFunc_0() -> *mut wire_WFunc {
        support::new_leak_box_ptr(wire_WFunc::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_bool_0(value: bool) -> *mut bool {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_compiled_module_0() -> *mut wire_CompiledModule {
        support::new_leak_box_ptr(wire_CompiledModule::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_memory_ty_0() -> *mut wire_MemoryTy {
        support::new_leak_box_ptr(wire_MemoryTy::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_module_config_0() -> *mut wire_ModuleConfig {
        support::new_leak_box_ptr(wire_ModuleConfig::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_module_config_wasmi_0() -> *mut wire_ModuleConfigWasmi {
        support::new_leak_box_ptr(wire_ModuleConfigWasmi::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_module_config_wasmtime_0() -> *mut wire_ModuleConfigWasmtime {
        support::new_leak_box_ptr(wire_ModuleConfigWasmtime::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_table_args_0() -> *mut wire_TableArgs {
        support::new_leak_box_ptr(wire_TableArgs::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_u32_0(value: u32) -> *mut u32 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_u64_0(value: u64) -> *mut u64 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_usize_0(value: usize) -> *mut usize {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_wasi_config_0() -> *mut wire_WasiConfig {
        support::new_leak_box_ptr(wire_WasiConfig::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_wasi_stack_limits_0() -> *mut wire_WasiStackLimits {
        support::new_leak_box_ptr(wire_WasiStackLimits::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_wasm_val_0() -> *mut wire_WasmVal {
        support::new_leak_box_ptr(wire_WasmVal::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_wasmit_instance_id_0() -> *mut wire_WasmitInstanceId {
        support::new_leak_box_ptr(wire_WasmitInstanceId::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_wasmit_module_id_0() -> *mut wire_WasmitModuleId {
        support::new_leak_box_ptr(wire_WasmitModuleId::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_env_variable_0(len: i32) -> *mut wire_list_env_variable {
        let wrap = wire_list_env_variable {
            ptr: support::new_leak_vec_ptr(<wire_EnvVariable>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_module_import_0(len: i32) -> *mut wire_list_module_import {
        let wrap = wire_list_module_import {
            ptr: support::new_leak_vec_ptr(<wire_ModuleImport>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_preopened_dir_0(len: i32) -> *mut wire_list_preopened_dir {
        let wrap = wire_list_preopened_dir {
            ptr: support::new_leak_vec_ptr(<wire_PreopenedDir>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_value_ty_0(len: i32) -> *mut wire_list_value_ty {
        let wrap = wire_list_value_ty {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_wasm_val_0(len: i32) -> *mut wire_list_wasm_val {
        let wrap = wire_list_wasm_val {
            ptr: support::new_leak_vec_ptr(<wire_WasmVal>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcStdSyncMutexModule(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<std::sync::Mutex<Module>>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcStdSyncMutexModule(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<std::sync::Mutex<Module>>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_Global(ptr: *const c_void) {
        unsafe {
            Arc::<Global>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_Global(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Global>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_Memory(ptr: *const c_void) {
        unsafe {
            Arc::<Memory>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_Memory(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Memory>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_Table(ptr: *const c_void) {
        unsafe {
            Arc::<Table>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_Table(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Table>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_WFunc(ptr: *const c_void) {
        unsafe {
            Arc::<WFunc>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_WFunc(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<WFunc>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<RustOpaque<Arc<std::sync::Mutex<Module>>>> for wire_ArcStdSyncMutexModule {
        fn wire2api(self) -> RustOpaque<Arc<std::sync::Mutex<Module>>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Global>> for wire_Global {
        fn wire2api(self) -> RustOpaque<Global> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Memory>> for wire_Memory {
        fn wire2api(self) -> RustOpaque<Memory> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Vec<String>> for *mut wire_StringList {
        fn wire2api(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<RustOpaque<Table>> for wire_Table {
        fn wire2api(self) -> RustOpaque<Table> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<WFunc>> for wire_WFunc {
        fn wire2api(self) -> RustOpaque<WFunc> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }

    impl Wire2Api<RustOpaque<WFunc>> for *mut wire_WFunc {
        fn wire2api(self) -> RustOpaque<WFunc> {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RustOpaque<WFunc>>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<bool> for *mut bool {
        fn wire2api(self) -> bool {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<CompiledModule> for *mut wire_CompiledModule {
        fn wire2api(self) -> CompiledModule {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<CompiledModule>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<MemoryTy> for *mut wire_MemoryTy {
        fn wire2api(self) -> MemoryTy {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MemoryTy>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ModuleConfig> for *mut wire_ModuleConfig {
        fn wire2api(self) -> ModuleConfig {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ModuleConfig>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ModuleConfigWasmi> for *mut wire_ModuleConfigWasmi {
        fn wire2api(self) -> ModuleConfigWasmi {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ModuleConfigWasmi>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<ModuleConfigWasmtime> for *mut wire_ModuleConfigWasmtime {
        fn wire2api(self) -> ModuleConfigWasmtime {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<ModuleConfigWasmtime>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<TableArgs> for *mut wire_TableArgs {
        fn wire2api(self) -> TableArgs {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<TableArgs>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<u32> for *mut u32 {
        fn wire2api(self) -> u32 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<u64> for *mut u64 {
        fn wire2api(self) -> u64 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<usize> for *mut usize {
        fn wire2api(self) -> usize {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<WasiConfig> for *mut wire_WasiConfig {
        fn wire2api(self) -> WasiConfig {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<WasiConfig>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<WasiStackLimits> for *mut wire_WasiStackLimits {
        fn wire2api(self) -> WasiStackLimits {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<WasiStackLimits>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<WasmVal> for *mut wire_WasmVal {
        fn wire2api(self) -> WasmVal {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<WasmVal>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<WasmitInstanceId> for *mut wire_WasmitInstanceId {
        fn wire2api(self) -> WasmitInstanceId {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<WasmitInstanceId>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<WasmitModuleId> for *mut wire_WasmitModuleId {
        fn wire2api(self) -> WasmitModuleId {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<WasmitModuleId>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<CompiledModule> for wire_CompiledModule {
        fn wire2api(self) -> CompiledModule {
            CompiledModule(self.field0.wire2api())
        }
    }
    impl Wire2Api<EnvVariable> for wire_EnvVariable {
        fn wire2api(self) -> EnvVariable {
            EnvVariable {
                name: self.name.wire2api(),
                value: self.value.wire2api(),
            }
        }
    }
    impl Wire2Api<ExternalValue> for wire_ExternalValue {
        fn wire2api(self) -> ExternalValue {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Func);
                    ExternalValue::Func(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Global);
                    ExternalValue::Global(ans.field0.wire2api())
                },
                2 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Table);
                    ExternalValue::Table(ans.field0.wire2api())
                },
                3 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Memory);
                    ExternalValue::Memory(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<Vec<EnvVariable>> for *mut wire_list_env_variable {
        fn wire2api(self) -> Vec<EnvVariable> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<ModuleImport>> for *mut wire_list_module_import {
        fn wire2api(self) -> Vec<ModuleImport> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<PreopenedDir>> for *mut wire_list_preopened_dir {
        fn wire2api(self) -> Vec<PreopenedDir> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<ValueTy>> for *mut wire_list_value_ty {
        fn wire2api(self) -> Vec<ValueTy> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<WasmVal>> for *mut wire_list_wasm_val {
        fn wire2api(self) -> Vec<WasmVal> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<MemoryTy> for wire_MemoryTy {
        fn wire2api(self) -> MemoryTy {
            MemoryTy {
                initial_pages: self.initial_pages.wire2api(),
                maximum_pages: self.maximum_pages.wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleConfig> for wire_ModuleConfig {
        fn wire2api(self) -> ModuleConfig {
            ModuleConfig {
                multi_value: self.multi_value.wire2api(),
                bulk_memory: self.bulk_memory.wire2api(),
                reference_types: self.reference_types.wire2api(),
                consume_fuel: self.consume_fuel.wire2api(),
                wasmi: self.wasmi.wire2api(),
                wasmtime: self.wasmtime.wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleConfigWasmi> for wire_ModuleConfigWasmi {
        fn wire2api(self) -> ModuleConfigWasmi {
            ModuleConfigWasmi {
                stack_limits: self.stack_limits.wire2api(),
                cached_stacks: self.cached_stacks.wire2api(),
                mutable_global: self.mutable_global.wire2api(),
                sign_extension: self.sign_extension.wire2api(),
                saturating_float_to_int: self.saturating_float_to_int.wire2api(),
                tail_call: self.tail_call.wire2api(),
                extended_const: self.extended_const.wire2api(),
                floats: self.floats.wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleConfigWasmtime> for wire_ModuleConfigWasmtime {
        fn wire2api(self) -> ModuleConfigWasmtime {
            ModuleConfigWasmtime {
                debug_info: self.debug_info.wire2api(),
                wasm_backtrace: self.wasm_backtrace.wire2api(),
                native_unwind_info: self.native_unwind_info.wire2api(),
                max_wasm_stack: self.max_wasm_stack.wire2api(),
                wasm_threads: self.wasm_threads.wire2api(),
                wasm_simd: self.wasm_simd.wire2api(),
                wasm_relaxed_simd: self.wasm_relaxed_simd.wire2api(),
                relaxed_simd_deterministic: self.relaxed_simd_deterministic.wire2api(),
                wasm_multi_memory: self.wasm_multi_memory.wire2api(),
                wasm_memory64: self.wasm_memory64.wire2api(),
                static_memory_maximum_size: self.static_memory_maximum_size.wire2api(),
                static_memory_forced: self.static_memory_forced.wire2api(),
                static_memory_guard_size: self.static_memory_guard_size.wire2api(),
                parallel_compilation: self.parallel_compilation.wire2api(),
                generate_address_map: self.generate_address_map.wire2api(),
            }
        }
    }
    impl Wire2Api<ModuleImport> for wire_ModuleImport {
        fn wire2api(self) -> ModuleImport {
            ModuleImport {
                module: self.module.wire2api(),
                name: self.name.wire2api(),
                value: self.value.wire2api(),
            }
        }
    }

    impl Wire2Api<PreopenedDir> for wire_PreopenedDir {
        fn wire2api(self) -> PreopenedDir {
            PreopenedDir {
                wasm_guest_path: self.wasm_guest_path.wire2api(),
                host_path: self.host_path.wire2api(),
            }
        }
    }

    impl Wire2Api<TableArgs> for wire_TableArgs {
        fn wire2api(self) -> TableArgs {
            TableArgs {
                min: self.min.wire2api(),
                max: self.max.wire2api(),
            }
        }
    }

    impl Wire2Api<[u8; 16]> for *mut wire_uint_8_list {
        fn wire2api(self) -> [u8; 16] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }

    impl Wire2Api<WasiConfig> for wire_WasiConfig {
        fn wire2api(self) -> WasiConfig {
            WasiConfig {
                capture_stdout: self.capture_stdout.wire2api(),
                capture_stderr: self.capture_stderr.wire2api(),
                inherit_stdin: self.inherit_stdin.wire2api(),
                inherit_env: self.inherit_env.wire2api(),
                inherit_args: self.inherit_args.wire2api(),
                args: self.args.wire2api(),
                env: self.env.wire2api(),
                preopened_files: self.preopened_files.wire2api(),
                preopened_dirs: self.preopened_dirs.wire2api(),
            }
        }
    }
    impl Wire2Api<WasiStackLimits> for wire_WasiStackLimits {
        fn wire2api(self) -> WasiStackLimits {
            WasiStackLimits {
                initial_value_stack_height: self.initial_value_stack_height.wire2api(),
                maximum_value_stack_height: self.maximum_value_stack_height.wire2api(),
                maximum_recursion_depth: self.maximum_recursion_depth.wire2api(),
            }
        }
    }
    impl Wire2Api<WasmVal> for wire_WasmVal {
        fn wire2api(self) -> WasmVal {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.i32);
                    WasmVal::i32(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.i64);
                    WasmVal::i64(ans.field0.wire2api())
                },
                2 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.f32);
                    WasmVal::f32(ans.field0.wire2api())
                },
                3 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.f64);
                    WasmVal::f64(ans.field0.wire2api())
                },
                4 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.v128);
                    WasmVal::v128(ans.field0.wire2api())
                },
                5 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.funcRef);
                    WasmVal::funcRef(ans.field0.wire2api())
                },
                6 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.externRef);
                    WasmVal::externRef(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<WasmitInstanceId> for wire_WasmitInstanceId {
        fn wire2api(self) -> WasmitInstanceId {
            WasmitInstanceId(self.field0.wire2api())
        }
    }
    impl Wire2Api<WasmitModuleId> for wire_WasmitModuleId {
        fn wire2api(self) -> WasmitModuleId {
            WasmitModuleId(self.field0.wire2api())
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcStdSyncMutexModule {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Global {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Memory {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_StringList {
        ptr: *mut *mut wire_uint_8_list,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Table {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WFunc {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_CompiledModule {
        field0: wire_ArcStdSyncMutexModule,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_EnvVariable {
        name: *mut wire_uint_8_list,
        value: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_env_variable {
        ptr: *mut wire_EnvVariable,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_module_import {
        ptr: *mut wire_ModuleImport,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_preopened_dir {
        ptr: *mut wire_PreopenedDir,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_value_ty {
        ptr: *mut i32,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_wasm_val {
        ptr: *mut wire_WasmVal,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MemoryTy {
        initial_pages: u32,
        maximum_pages: *mut u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ModuleConfig {
        multi_value: *mut bool,
        bulk_memory: *mut bool,
        reference_types: *mut bool,
        consume_fuel: *mut bool,
        wasmi: *mut wire_ModuleConfigWasmi,
        wasmtime: *mut wire_ModuleConfigWasmtime,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ModuleConfigWasmi {
        stack_limits: *mut wire_WasiStackLimits,
        cached_stacks: *mut usize,
        mutable_global: *mut bool,
        sign_extension: *mut bool,
        saturating_float_to_int: *mut bool,
        tail_call: *mut bool,
        extended_const: *mut bool,
        floats: *mut bool,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ModuleConfigWasmtime {
        debug_info: *mut bool,
        wasm_backtrace: *mut bool,
        native_unwind_info: *mut bool,
        max_wasm_stack: *mut usize,
        wasm_threads: *mut bool,
        wasm_simd: *mut bool,
        wasm_relaxed_simd: *mut bool,
        relaxed_simd_deterministic: *mut bool,
        wasm_multi_memory: *mut bool,
        wasm_memory64: *mut bool,
        static_memory_maximum_size: *mut u64,
        static_memory_forced: *mut bool,
        static_memory_guard_size: *mut u64,
        parallel_compilation: *mut bool,
        generate_address_map: *mut bool,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ModuleImport {
        module: *mut wire_uint_8_list,
        name: *mut wire_uint_8_list,
        value: wire_ExternalValue,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_PreopenedDir {
        wasm_guest_path: *mut wire_uint_8_list,
        host_path: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_TableArgs {
        min: u32,
        max: *mut u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasiConfig {
        capture_stdout: bool,
        capture_stderr: bool,
        inherit_stdin: bool,
        inherit_env: bool,
        inherit_args: bool,
        args: *mut wire_StringList,
        env: *mut wire_list_env_variable,
        preopened_files: *mut wire_StringList,
        preopened_dirs: *mut wire_list_preopened_dir,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasiStackLimits {
        initial_value_stack_height: usize,
        maximum_value_stack_height: usize,
        maximum_recursion_depth: usize,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmitInstanceId {
        field0: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmitModuleId {
        field0: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ExternalValue {
        tag: i32,
        kind: *mut ExternalValueKind,
    }

    #[repr(C)]
    pub union ExternalValueKind {
        Func: *mut wire_ExternalValue_Func,
        Global: *mut wire_ExternalValue_Global,
        Table: *mut wire_ExternalValue_Table,
        Memory: *mut wire_ExternalValue_Memory,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ExternalValue_Func {
        field0: wire_WFunc,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ExternalValue_Global {
        field0: wire_Global,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ExternalValue_Table {
        field0: wire_Table,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ExternalValue_Memory {
        field0: wire_Memory,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal {
        tag: i32,
        kind: *mut WasmValKind,
    }

    #[repr(C)]
    pub union WasmValKind {
        i32: *mut wire_WasmVal_i32,
        i64: *mut wire_WasmVal_i64,
        f32: *mut wire_WasmVal_f32,
        f64: *mut wire_WasmVal_f64,
        v128: *mut wire_WasmVal_v128,
        funcRef: *mut wire_WasmVal_funcRef,
        externRef: *mut wire_WasmVal_externRef,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_i32 {
        field0: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_i64 {
        field0: i64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_f32 {
        field0: f32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_f64 {
        field0: f64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_v128 {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_funcRef {
        field0: *mut wire_WFunc,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmVal_externRef {
        field0: *mut u32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_ArcStdSyncMutexModule {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_Global {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_Memory {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }

    impl NewWithNullPtr for wire_Table {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_WFunc {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }

    impl NewWithNullPtr for wire_CompiledModule {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: wire_ArcStdSyncMutexModule::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_CompiledModule {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_EnvVariable {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                value: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_EnvVariable {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ExternalValue {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_ExternalValue_Func() -> *mut ExternalValueKind {
        support::new_leak_box_ptr(ExternalValueKind {
            Func: support::new_leak_box_ptr(wire_ExternalValue_Func {
                field0: wire_WFunc::new_with_null_ptr(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_ExternalValue_Global() -> *mut ExternalValueKind {
        support::new_leak_box_ptr(ExternalValueKind {
            Global: support::new_leak_box_ptr(wire_ExternalValue_Global {
                field0: wire_Global::new_with_null_ptr(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_ExternalValue_Table() -> *mut ExternalValueKind {
        support::new_leak_box_ptr(ExternalValueKind {
            Table: support::new_leak_box_ptr(wire_ExternalValue_Table {
                field0: wire_Table::new_with_null_ptr(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_ExternalValue_Memory() -> *mut ExternalValueKind {
        support::new_leak_box_ptr(ExternalValueKind {
            Memory: support::new_leak_box_ptr(wire_ExternalValue_Memory {
                field0: wire_Memory::new_with_null_ptr(),
            }),
        })
    }

    impl NewWithNullPtr for wire_MemoryTy {
        fn new_with_null_ptr() -> Self {
            Self {
                initial_pages: Default::default(),
                maximum_pages: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_MemoryTy {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ModuleConfig {
        fn new_with_null_ptr() -> Self {
            Self {
                multi_value: core::ptr::null_mut(),
                bulk_memory: core::ptr::null_mut(),
                reference_types: core::ptr::null_mut(),
                consume_fuel: core::ptr::null_mut(),
                wasmi: core::ptr::null_mut(),
                wasmtime: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_ModuleConfig {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ModuleConfigWasmi {
        fn new_with_null_ptr() -> Self {
            Self {
                stack_limits: core::ptr::null_mut(),
                cached_stacks: core::ptr::null_mut(),
                mutable_global: core::ptr::null_mut(),
                sign_extension: core::ptr::null_mut(),
                saturating_float_to_int: core::ptr::null_mut(),
                tail_call: core::ptr::null_mut(),
                extended_const: core::ptr::null_mut(),
                floats: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_ModuleConfigWasmi {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ModuleConfigWasmtime {
        fn new_with_null_ptr() -> Self {
            Self {
                debug_info: core::ptr::null_mut(),
                wasm_backtrace: core::ptr::null_mut(),
                native_unwind_info: core::ptr::null_mut(),
                max_wasm_stack: core::ptr::null_mut(),
                wasm_threads: core::ptr::null_mut(),
                wasm_simd: core::ptr::null_mut(),
                wasm_relaxed_simd: core::ptr::null_mut(),
                relaxed_simd_deterministic: core::ptr::null_mut(),
                wasm_multi_memory: core::ptr::null_mut(),
                wasm_memory64: core::ptr::null_mut(),
                static_memory_maximum_size: core::ptr::null_mut(),
                static_memory_forced: core::ptr::null_mut(),
                static_memory_guard_size: core::ptr::null_mut(),
                parallel_compilation: core::ptr::null_mut(),
                generate_address_map: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_ModuleConfigWasmtime {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_ModuleImport {
        fn new_with_null_ptr() -> Self {
            Self {
                module: core::ptr::null_mut(),
                name: core::ptr::null_mut(),
                value: Default::default(),
            }
        }
    }

    impl Default for wire_ModuleImport {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_PreopenedDir {
        fn new_with_null_ptr() -> Self {
            Self {
                wasm_guest_path: core::ptr::null_mut(),
                host_path: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_PreopenedDir {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_TableArgs {
        fn new_with_null_ptr() -> Self {
            Self {
                min: Default::default(),
                max: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_TableArgs {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_WasiConfig {
        fn new_with_null_ptr() -> Self {
            Self {
                capture_stdout: Default::default(),
                capture_stderr: Default::default(),
                inherit_stdin: Default::default(),
                inherit_env: Default::default(),
                inherit_args: Default::default(),
                args: core::ptr::null_mut(),
                env: core::ptr::null_mut(),
                preopened_files: core::ptr::null_mut(),
                preopened_dirs: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_WasiConfig {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_WasiStackLimits {
        fn new_with_null_ptr() -> Self {
            Self {
                initial_value_stack_height: Default::default(),
                maximum_value_stack_height: Default::default(),
                maximum_recursion_depth: Default::default(),
            }
        }
    }

    impl Default for wire_WasiStackLimits {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_WasmVal {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_i32() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            i32: support::new_leak_box_ptr(wire_WasmVal_i32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_i64() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            i64: support::new_leak_box_ptr(wire_WasmVal_i64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_f32() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            f32: support::new_leak_box_ptr(wire_WasmVal_f32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_f64() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            f64: support::new_leak_box_ptr(wire_WasmVal_f64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_v128() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            v128: support::new_leak_box_ptr(wire_WasmVal_v128 {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_funcRef() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            funcRef: support::new_leak_box_ptr(wire_WasmVal_funcRef {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_WasmVal_externRef() -> *mut WasmValKind {
        support::new_leak_box_ptr(WasmValKind {
            externRef: support::new_leak_box_ptr(wire_WasmVal_externRef {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    impl NewWithNullPtr for wire_WasmitInstanceId {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: Default::default(),
            }
        }
    }

    impl Default for wire_WasmitInstanceId {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_WasmitModuleId {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: Default::default(),
            }
        }
    }

    impl Default for wire_WasmitModuleId {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
