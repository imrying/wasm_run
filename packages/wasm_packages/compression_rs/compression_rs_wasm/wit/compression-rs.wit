package compression-rs-namespace:compression-rs

interface flate {
  type io-error = string
  type io-success = u32

  enum compressor-kind {
    brotli,
    lz4,
    zstd,
    deflate,
    gzip,
    zlib,
  }

  variant input {
    bytes(list<u8>),
    file(string),
  }

  // compress: func(kind: compressor-kind, input: input) -> result<list<u8>, io-error>
  // decompress: func(kind: compressor-kind, input: input) -> result<list<u8>, io-error>
  // compress-file: func(kind: compressor-kind, input: input, output-path: string) -> result<io-success, io-error>
  // decompress-file: func(kind: compressor-kind, input: input, output-path: string) -> result<io-success, io-error>
}

interface brotli {
  use flate.{io-error, io-success, input}

  brotli-compress: func(input: input) -> result<list<u8>, io-error>
  brotli-decompress: func(input: input) -> result<list<u8>, io-error>
  brotli-compress-file: func(input: input, output-path: string) -> result<io-success, io-error>
  brotli-decompress-file: func(input: input, output-path: string) -> result<io-success, io-error>
}

interface lz4 {
  use flate.{io-error, io-success, input}

  lz4-compress: func(input: input) -> result<list<u8>, io-error>
  lz4-decompress: func(input: input) -> result<list<u8>, io-error>
  lz4-compress-file: func(input: input, output-path: string) -> result<io-success, io-error>
  lz4-decompress-file: func(input: input, output-path: string) -> result<io-success, io-error>
}

interface zstd {
  use flate.{io-error, io-success, input}

  zstd-compress: func(input: input) -> result<list<u8>, io-error>
  zstd-decompress: func(input: input) -> result<list<u8>, io-error>
  zstd-compress-file: func(input: input, output-path: string) -> result<io-success, io-error>
  zstd-decompress-file: func(input: input, output-path: string) -> result<io-success, io-error>
}

interface gzip {
  use flate.{io-error, io-success, input}

  gzip-compress: func(input: input) -> result<list<u8>, io-error>
  gzip-decompress: func(input: input) -> result<list<u8>, io-error>
  gzip-compress-file: func(input: input, output-path: string) -> result<io-success, io-error>
  gzip-decompress-file: func(input: input, output-path: string) -> result<io-success, io-error>
}

interface zlib {
  use flate.{io-error, io-success, input}

  zlib-compress: func(input: input) -> result<list<u8>, io-error>
  zlib-decompress: func(input: input) -> result<list<u8>, io-error>
  zlib-compress-file: func(input: input, output-path: string) -> result<io-success, io-error>
  zlib-decompress-file: func(input: input, output-path: string) -> result<io-success, io-error>
}

interface deflate {
  use flate.{io-error, io-success, input}

  deflate-compress: func(input: input) -> result<list<u8>, io-error>
  deflate-decompress: func(input: input) -> result<list<u8>, io-error>
  deflate-compress-file: func(input: input, output-path: string) -> result<io-success, io-error>
  deflate-decompress-file: func(input: input, output-path: string) -> result<io-success, io-error>
}

world compression-rs {
    export brotli
    export lz4
    export zstd
    export deflate
    export gzip
    export zlib
    // export flate
}
