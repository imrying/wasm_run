#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_parse_wat_format_impl(port_: MessagePort, wat: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "parse_wat_format",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_wat = wat.wire2api();
            move |task_callback| parse_wat_format(api_wat)
        },
    )
}
fn wire_run_function_impl(pointer: impl Wire2Api<i64> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "run_function",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_pointer = pointer.wire2api();
            Ok(run_function(api_pointer))
        },
    )
}
fn wire_run_wasm_func_impl(
    pointer: impl Wire2Api<usize> + UnwindSafe,
    params: impl Wire2Api<Vec<Value2>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "run_wasm_func",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_pointer = pointer.wire2api();
            let api_params = params.wire2api();
            Ok(run_wasm_func(api_pointer, api_params))
        },
    )
}
fn wire_run_wasm_func_void_impl(
    pointer: impl Wire2Api<usize> + UnwindSafe,
    params: impl Wire2Api<Vec<Value2>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "run_wasm_func_void",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_pointer = pointer.wire2api();
            let api_params = params.wire2api();
            Ok(run_wasm_func_void(api_pointer, api_params))
        },
    )
}
fn wire_compile_wasm_impl(port_: MessagePort, module_wasm: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "compile_wasm",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_module_wasm = module_wasm.wire2api();
            move |task_callback| compile_wasm(api_module_wasm)
        },
    )
}
fn wire_call_wasm_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_wasm",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| call_wasm(),
    )
}
fn wire_add_impl(
    port_: MessagePort,
    a: impl Wire2Api<i64> + UnwindSafe,
    b: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(add(api_a, api_b))
        },
    )
}
fn wire_call_function__method__WasmiModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmiModuleId> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_function__method__WasmiModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            move |task_callback| WasmiModuleId::call_function(&api_that, api_name)
        },
    )
}
fn wire_call_function_with_args__method__WasmiModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmiModuleId> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    args: impl Wire2Api<Vec<Value2>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_function_with_args__method__WasmiModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            let api_args = args.wire2api();
            move |task_callback| {
                WasmiModuleId::call_function_with_args(&api_that, api_name, api_args)
            }
        },
    )
}
fn wire_get_exports__method__WasmiModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmiModuleId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_exports__method__WasmiModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(WasmiModuleId::get_exports(&api_that))
        },
    )
}
fn wire_get_module_exports__method__WasmiModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmiModuleId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_module_exports__method__WasmiModuleId",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(WasmiModuleId::get_module_exports(&api_that))
        },
    )
}
fn wire_executions__method__WasmiModuleId_impl(
    port_: MessagePort,
    that: impl Wire2Api<WasmiModuleId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "executions__method__WasmiModuleId",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| WasmiModuleId::executions(&api_that, task_callback.stream_sink())
        },
    )
}
fn wire_call_function_with_args_sync__method__WasmiModuleId_impl(
    that: impl Wire2Api<WasmiModuleId> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    args: impl Wire2Api<Vec<Value2>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "call_function_with_args_sync__method__WasmiModuleId",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            let api_args = args.wire2api();
            WasmiModuleId::call_function_with_args_sync(&api_that, api_name, api_args)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Value2 {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::I32(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::I64(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::F32(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::F64(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::FuncRef(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::ExternRef(field0) => vec![5.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Value2 {}
impl support::IntoDart for WasmiModuleId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WasmiModuleId {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_parse_wat_format(port_: MessagePort, wat: String) {
        wire_parse_wat_format_impl(port_, wat)
    }

    #[wasm_bindgen]
    pub fn wire_run_function(pointer: i64) -> support::WireSyncReturn {
        wire_run_function_impl(pointer)
    }

    #[wasm_bindgen]
    pub fn wire_run_wasm_func(pointer: usize, params: JsValue) -> support::WireSyncReturn {
        wire_run_wasm_func_impl(pointer, params)
    }

    #[wasm_bindgen]
    pub fn wire_run_wasm_func_void(pointer: usize, params: JsValue) -> support::WireSyncReturn {
        wire_run_wasm_func_void_impl(pointer, params)
    }

    #[wasm_bindgen]
    pub fn wire_compile_wasm(port_: MessagePort, module_wasm: Box<[u8]>) {
        wire_compile_wasm_impl(port_, module_wasm)
    }

    #[wasm_bindgen]
    pub fn wire_call_wasm(port_: MessagePort) {
        wire_call_wasm_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_add(port_: MessagePort, a: i64, b: i64) {
        wire_add_impl(port_, a, b)
    }

    #[wasm_bindgen]
    pub fn wire_call_function__method__WasmiModuleId(
        port_: MessagePort,
        that: JsValue,
        name: String,
    ) {
        wire_call_function__method__WasmiModuleId_impl(port_, that, name)
    }

    #[wasm_bindgen]
    pub fn wire_call_function_with_args__method__WasmiModuleId(
        port_: MessagePort,
        that: JsValue,
        name: String,
        args: JsValue,
    ) {
        wire_call_function_with_args__method__WasmiModuleId_impl(port_, that, name, args)
    }

    #[wasm_bindgen]
    pub fn wire_get_exports__method__WasmiModuleId(port_: MessagePort, that: JsValue) {
        wire_get_exports__method__WasmiModuleId_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_get_module_exports__method__WasmiModuleId(port_: MessagePort, that: JsValue) {
        wire_get_module_exports__method__WasmiModuleId_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_executions__method__WasmiModuleId(port_: MessagePort, that: JsValue) {
        wire_executions__method__WasmiModuleId_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_call_function_with_args_sync__method__WasmiModuleId(
        that: JsValue,
        name: String,
        args: JsValue,
    ) -> support::WireSyncReturn {
        wire_call_function_with_args_sync__method__WasmiModuleId_impl(that, name, args)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<Vec<Value2>> for JsValue {
        fn wire2api(self) -> Vec<Value2> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }

    impl Wire2Api<Value2> for JsValue {
        fn wire2api(self) -> Value2 {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => Value2::I32(self_.get(1).wire2api()),
                1 => Value2::I64(self_.get(1).wire2api()),
                2 => Value2::F32(self_.get(1).wire2api()),
                3 => Value2::F64(self_.get(1).wire2api()),
                4 => Value2::FuncRef(self_.get(1).wire2api()),
                5 => Value2::ExternRef(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<WasmiModuleId> for JsValue {
        fn wire2api(self) -> WasmiModuleId {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            WasmiModuleId(self_.get(0).wire2api())
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<f32> for JsValue {
        fn wire2api(self) -> f32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<f64> for JsValue {
        fn wire2api(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i64> for JsValue {
        fn wire2api(self) -> i64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
    impl Wire2Api<usize> for JsValue {
        fn wire2api(self) -> usize {
            self.unchecked_into_f64() as _
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_parse_wat_format(port_: i64, wat: *mut wire_uint_8_list) {
        wire_parse_wat_format_impl(port_, wat)
    }

    #[no_mangle]
    pub extern "C" fn wire_run_function(pointer: i64) -> support::WireSyncReturn {
        wire_run_function_impl(pointer)
    }

    #[no_mangle]
    pub extern "C" fn wire_run_wasm_func(
        pointer: usize,
        params: *mut wire_list_value_2,
    ) -> support::WireSyncReturn {
        wire_run_wasm_func_impl(pointer, params)
    }

    #[no_mangle]
    pub extern "C" fn wire_run_wasm_func_void(
        pointer: usize,
        params: *mut wire_list_value_2,
    ) -> support::WireSyncReturn {
        wire_run_wasm_func_void_impl(pointer, params)
    }

    #[no_mangle]
    pub extern "C" fn wire_compile_wasm(port_: i64, module_wasm: *mut wire_uint_8_list) {
        wire_compile_wasm_impl(port_, module_wasm)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_wasm(port_: i64) {
        wire_call_wasm_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_add(port_: i64, a: i64, b: i64) {
        wire_add_impl(port_, a, b)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_function__method__WasmiModuleId(
        port_: i64,
        that: *mut wire_WasmiModuleId,
        name: *mut wire_uint_8_list,
    ) {
        wire_call_function__method__WasmiModuleId_impl(port_, that, name)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_function_with_args__method__WasmiModuleId(
        port_: i64,
        that: *mut wire_WasmiModuleId,
        name: *mut wire_uint_8_list,
        args: *mut wire_list_value_2,
    ) {
        wire_call_function_with_args__method__WasmiModuleId_impl(port_, that, name, args)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_exports__method__WasmiModuleId(
        port_: i64,
        that: *mut wire_WasmiModuleId,
    ) {
        wire_get_exports__method__WasmiModuleId_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_module_exports__method__WasmiModuleId(
        port_: i64,
        that: *mut wire_WasmiModuleId,
    ) {
        wire_get_module_exports__method__WasmiModuleId_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_executions__method__WasmiModuleId(
        port_: i64,
        that: *mut wire_WasmiModuleId,
    ) {
        wire_executions__method__WasmiModuleId_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_function_with_args_sync__method__WasmiModuleId(
        that: *mut wire_WasmiModuleId,
        name: *mut wire_uint_8_list,
        args: *mut wire_list_value_2,
    ) -> support::WireSyncReturn {
        wire_call_function_with_args_sync__method__WasmiModuleId_impl(that, name, args)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_wasmi_module_id_0() -> *mut wire_WasmiModuleId {
        support::new_leak_box_ptr(wire_WasmiModuleId::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_value_2_0(len: i32) -> *mut wire_list_value_2 {
        let wrap = wire_list_value_2 {
            ptr: support::new_leak_vec_ptr(<wire_Value2>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<WasmiModuleId> for *mut wire_WasmiModuleId {
        fn wire2api(self) -> WasmiModuleId {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<WasmiModuleId>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<Vec<Value2>> for *mut wire_list_value_2 {
        fn wire2api(self) -> Vec<Value2> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }

    impl Wire2Api<Value2> for wire_Value2 {
        fn wire2api(self) -> Value2 {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.I32);
                    Value2::I32(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.I64);
                    Value2::I64(ans.field0.wire2api())
                },
                2 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.F32);
                    Value2::F32(ans.field0.wire2api())
                },
                3 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.F64);
                    Value2::F64(ans.field0.wire2api())
                },
                4 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.FuncRef);
                    Value2::FuncRef(ans.field0.wire2api())
                },
                5 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.ExternRef);
                    Value2::ExternRef(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<WasmiModuleId> for wire_WasmiModuleId {
        fn wire2api(self) -> WasmiModuleId {
            WasmiModuleId(self.field0.wire2api())
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_value_2 {
        ptr: *mut wire_Value2,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_WasmiModuleId {
        field0: usize,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2 {
        tag: i32,
        kind: *mut Value2Kind,
    }

    #[repr(C)]
    pub union Value2Kind {
        I32: *mut wire_Value2_I32,
        I64: *mut wire_Value2_I64,
        F32: *mut wire_Value2_F32,
        F64: *mut wire_Value2_F64,
        FuncRef: *mut wire_Value2_FuncRef,
        ExternRef: *mut wire_Value2_ExternRef,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2_I32 {
        field0: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2_I64 {
        field0: i64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2_F32 {
        field0: f32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2_F64 {
        field0: f64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2_FuncRef {
        field0: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Value2_ExternRef {
        field0: u32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_Value2 {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_Value2_I32() -> *mut Value2Kind {
        support::new_leak_box_ptr(Value2Kind {
            I32: support::new_leak_box_ptr(wire_Value2_I32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_Value2_I64() -> *mut Value2Kind {
        support::new_leak_box_ptr(Value2Kind {
            I64: support::new_leak_box_ptr(wire_Value2_I64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_Value2_F32() -> *mut Value2Kind {
        support::new_leak_box_ptr(Value2Kind {
            F32: support::new_leak_box_ptr(wire_Value2_F32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_Value2_F64() -> *mut Value2Kind {
        support::new_leak_box_ptr(Value2Kind {
            F64: support::new_leak_box_ptr(wire_Value2_F64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_Value2_FuncRef() -> *mut Value2Kind {
        support::new_leak_box_ptr(Value2Kind {
            FuncRef: support::new_leak_box_ptr(wire_Value2_FuncRef {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_Value2_ExternRef() -> *mut Value2Kind {
        support::new_leak_box_ptr(Value2Kind {
            ExternRef: support::new_leak_box_ptr(wire_Value2_ExternRef {
                field0: Default::default(),
            }),
        })
    }

    impl NewWithNullPtr for wire_WasmiModuleId {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: Default::default(),
            }
        }
    }

    impl Default for wire_WasmiModuleId {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
