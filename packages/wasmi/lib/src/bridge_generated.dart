// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class WasmiDart {
  Future<Uint8List> parseWatFormat({required String wat, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta;

  List<Value2> runFunction({required int pointer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunFunctionConstMeta;

  List<Value2> runWasmFunc(
      {required int pointer, required List<Value2> params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncConstMeta;

  bool runWasmFuncVoid(
      {required int pointer, required List<Value2> params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncVoidConstMeta;

  Future<WasmiModuleId> compileWasm(
      {required Uint8List moduleWasm, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta;

  Future<void> callWasm({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallWasmConstMeta;

  Future<int> add({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddConstMeta;

  Future<List<Value2>> callFunctionMethodWasmiModuleId(
      {required WasmiModuleId that, required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallFunctionMethodWasmiModuleIdConstMeta;

  Future<List<Value2>> callFunctionWithArgsMethodWasmiModuleId(
      {required WasmiModuleId that,
      required String name,
      required List<Value2> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsMethodWasmiModuleIdConstMeta;

  Future<List<String>> getExportsMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetExportsMethodWasmiModuleIdConstMeta;

  Future<List<String>> getModuleExportsMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodWasmiModuleIdConstMeta;

  Stream<int> executionsMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExecutionsMethodWasmiModuleIdConstMeta;

  List<Value2> callFunctionWithArgsSyncMethodWasmiModuleId(
      {required WasmiModuleId that,
      required String name,
      required List<Value2> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsSyncMethodWasmiModuleIdConstMeta;
}

@freezed
class Value2 with _$Value2 {
  /// Value of 32-bit signed or unsigned integer.
  const factory Value2.i32(
    int field0,
  ) = Value2_I32;

  /// Value of 64-bit signed or unsigned integer.
  const factory Value2.i64(
    int field0,
  ) = Value2_I64;

  /// Value of 32-bit IEEE 754-2008 floating point number.
  const factory Value2.f32(
    double field0,
  ) = Value2_F32;

  /// Value of 64-bit IEEE 754-2008 floating point number.
  const factory Value2.f64(
    double field0,
  ) = Value2_F64;

  /// A nullable [`Func`][`crate::Func`] reference, a.k.a. [`FuncRef`].
  const factory Value2.funcRef(
    int field0,
  ) = Value2_FuncRef;

  /// A nullable external object reference, a.k.a. [`ExternRef`].
  const factory Value2.externRef(
    int field0,
  ) = Value2_ExternRef;
}

class WasmiModuleId {
  final WasmiDart bridge;
  final int field0;

  const WasmiModuleId({
    required this.bridge,
    required this.field0,
  });

  Future<List<Value2>> callFunction({required String name, dynamic hint}) =>
      bridge.callFunctionMethodWasmiModuleId(
        that: this,
        name: name,
      );

  Future<List<Value2>> callFunctionWithArgs(
          {required String name, required List<Value2> args, dynamic hint}) =>
      bridge.callFunctionWithArgsMethodWasmiModuleId(
        that: this,
        name: name,
        args: args,
      );

  Future<List<String>> getExports({dynamic hint}) =>
      bridge.getExportsMethodWasmiModuleId(
        that: this,
      );

  Future<List<String>> getModuleExports({dynamic hint}) =>
      bridge.getModuleExportsMethodWasmiModuleId(
        that: this,
      );

  Stream<int> executions({dynamic hint}) =>
      bridge.executionsMethodWasmiModuleId(
        that: this,
      );

  List<Value2> callFunctionWithArgsSync(
          {required String name, required List<Value2> args, dynamic hint}) =>
      bridge.callFunctionWithArgsSyncMethodWasmiModuleId(
        that: this,
        name: name,
        args: args,
      );
}

class WasmiDartImpl implements WasmiDart {
  final WasmiDartPlatform _platform;
  factory WasmiDartImpl(ExternalLibrary dylib) =>
      WasmiDartImpl.raw(WasmiDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory WasmiDartImpl.wasm(FutureOr<WasmModule> module) =>
      WasmiDartImpl(module as ExternalLibrary);
  WasmiDartImpl.raw(this._platform);
  Future<Uint8List> parseWatFormat({required String wat, dynamic hint}) {
    var arg0 = _platform.api2wire_String(wat);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_wat_format(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kParseWatFormatConstMeta,
      argValues: [wat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_wat_format",
        argNames: ["wat"],
      );

  List<Value2> runFunction({required int pointer, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(pointer);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_function(arg0),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kRunFunctionConstMeta,
      argValues: [pointer],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunFunctionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_function",
        argNames: ["pointer"],
      );

  List<Value2> runWasmFunc(
      {required int pointer, required List<Value2> params, dynamic hint}) {
    var arg0 = api2wire_usize(pointer);
    var arg1 = _platform.api2wire_list_value_2(params);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_wasm_func(arg0, arg1),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kRunWasmFuncConstMeta,
      argValues: [pointer, params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_wasm_func",
        argNames: ["pointer", "params"],
      );

  bool runWasmFuncVoid(
      {required int pointer, required List<Value2> params, dynamic hint}) {
    var arg0 = api2wire_usize(pointer);
    var arg1 = _platform.api2wire_list_value_2(params);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_wasm_func_void(arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kRunWasmFuncVoidConstMeta,
      argValues: [pointer, params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncVoidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_wasm_func_void",
        argNames: ["pointer", "params"],
      );

  Future<WasmiModuleId> compileWasm(
      {required Uint8List moduleWasm, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_compile_wasm(port_, arg0),
      parseSuccessData: (d) => _wire2api_wasmi_module_id(d),
      constMeta: kCompileWasmConstMeta,
      argValues: [moduleWasm],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm",
        argNames: ["moduleWasm"],
      );

  Future<void> callWasm({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_call_wasm(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCallWasmConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallWasmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "call_wasm",
        argNames: [],
      );

  Future<int> add({required int a, required int b, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(a);
    var arg1 = _platform.api2wire_i64(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add(port_, arg0, arg1),
      parseSuccessData: _wire2api_i64,
      constMeta: kAddConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add",
        argNames: ["a", "b"],
      );

  Future<List<Value2>> callFunctionMethodWasmiModuleId(
      {required WasmiModuleId that, required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function__method__WasmiModuleId(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionMethodWasmiModuleIdConstMeta,
      argValues: [that, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function__method__WasmiModuleId",
            argNames: ["that", "name"],
          );

  Future<List<Value2>> callFunctionWithArgsMethodWasmiModuleId(
      {required WasmiModuleId that,
      required String name,
      required List<Value2> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_list_value_2(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function_with_args__method__WasmiModuleId(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionWithArgsMethodWasmiModuleIdConstMeta,
      argValues: [that, name, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_with_args__method__WasmiModuleId",
            argNames: ["that", "name", "args"],
          );

  Future<List<String>> getExportsMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_exports__method__WasmiModuleId(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetExportsMethodWasmiModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetExportsMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_exports__method__WasmiModuleId",
        argNames: ["that"],
      );

  Future<List<String>> getModuleExportsMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_module_exports__method__WasmiModuleId(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetModuleExportsMethodWasmiModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_exports__method__WasmiModuleId",
            argNames: ["that"],
          );

  Stream<int> executionsMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_executions__method__WasmiModuleId(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kExecutionsMethodWasmiModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExecutionsMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "executions__method__WasmiModuleId",
        argNames: ["that"],
      );

  List<Value2> callFunctionWithArgsSyncMethodWasmiModuleId(
      {required WasmiModuleId that,
      required String name,
      required List<Value2> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_list_value_2(args);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_call_function_with_args_sync__method__WasmiModuleId(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionWithArgsSyncMethodWasmiModuleIdConstMeta,
      argValues: [that, name, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsSyncMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_with_args_sync__method__WasmiModuleId",
            argNames: ["that", "name", "args"],
          );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<Value2> _wire2api_list_value_2(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_value_2).toList();
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  Value2 _wire2api_value_2(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Value2_I32(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return Value2_I64(
          _wire2api_i64(raw[1]),
        );
      case 2:
        return Value2_F32(
          _wire2api_f32(raw[1]),
        );
      case 3:
        return Value2_F64(
          _wire2api_f64(raw[1]),
        );
      case 4:
        return Value2_FuncRef(
          _wire2api_u32(raw[1]),
        );
      case 5:
        return Value2_ExternRef(
          _wire2api_u32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  WasmiModuleId _wire2api_wasmi_module_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmiModuleId(
      bridge: this,
      field0: _wire2api_usize(arr[0]),
    );
  }
}

// Section: api2wire

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

// Section: finalizer
