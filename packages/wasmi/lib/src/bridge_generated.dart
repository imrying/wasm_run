// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class WasmiDart {
  Memory createSharedMemory({required CompiledModule module, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateSharedMemoryConstMeta;

  WasmiModuleId moduleBuilder(
      {required CompiledModule module, WasiConfig? wasiConfig, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kModuleBuilderConstMeta;

  Future<Uint8List> parseWatFormat({required String wat, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta;

  List<Value2> runFunction({required int pointer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunFunctionConstMeta;

  List<Value2> runWasmFunc(
      {required int pointer, required List<Value2> params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncConstMeta;

  List<Value2> runWasmFuncMut(
      {required int pointer, required List<Value2> params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncMutConstMeta;

  bool runWasmFuncVoid(
      {required int pointer, required List<Value2> params, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncVoidConstMeta;

  Future<CompiledModule> compileWasm(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta;

  CompiledModule compileWasmSync(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmSyncConstMeta;

  Future<void> callWasm({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallWasmConstMeta;

  Future<int> add({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddConstMeta;

  Future<List<Value2>> callFunctionMethodWasmiInstanceId(
      {required WasmiInstanceId that, required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionMethodWasmiInstanceIdConstMeta;

  List<Value2> callFunctionWithArgsSyncMethodWasmiInstanceId(
      {required WasmiInstanceId that,
      required String name,
      required List<Value2> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsSyncMethodWasmiInstanceIdConstMeta;

  Future<List<Value2>> callFunctionWithArgsMethodWasmiInstanceId(
      {required WasmiInstanceId that,
      required String name,
      required List<Value2> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsMethodWasmiInstanceIdConstMeta;

  List<ModuleExportValue> exportsMethodWasmiInstanceId(
      {required WasmiInstanceId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExportsMethodWasmiInstanceIdConstMeta;

  WasmiInstanceId instantiateSyncMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kInstantiateSyncMethodWasmiModuleIdConstMeta;

  Future<WasmiInstanceId> instantiateMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstantiateMethodWasmiModuleIdConstMeta;

  void linkImportsMethodWasmiModuleId(
      {required WasmiModuleId that,
      required List<ModuleImport> imports,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLinkImportsMethodWasmiModuleIdConstMeta;

  Future<void> disposeMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisposeMethodWasmiModuleIdConstMeta;

  List<Value2> callFunctionHandleSyncMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Func func,
      required List<Value2> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleSyncMethodWasmiModuleIdConstMeta;

  Future<List<Value2>> callFunctionHandleMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Func func,
      required List<Value2> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleMethodWasmiModuleIdConstMeta;

  FuncTy getFunctionTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Func func, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetFunctionTypeMethodWasmiModuleIdConstMeta;

  Func createFunctionMethodWasmiModuleId(
      {required WasmiModuleId that,
      required int functionPointer,
      required int functionId,
      required List<ValueTy> paramTypes,
      required List<ValueTy> resultTypes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateFunctionMethodWasmiModuleIdConstMeta;

  Memory createMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required WasmMemoryType memoryType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateMemoryMethodWasmiModuleIdConstMeta;

  Global createGlobalMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Value2 value,
      required Mutability mutability,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateGlobalMethodWasmiModuleIdConstMeta;

  Table createTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Value2 value,
      required TableType2 tableType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateTableMethodWasmiModuleIdConstMeta;

  GlobalTy getGlobalTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Global global, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetGlobalTypeMethodWasmiModuleIdConstMeta;

  Value2 getGlobalValueMethodWasmiModuleId(
      {required WasmiModuleId that, required Global global, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalValueMethodWasmiModuleIdConstMeta;

  void setGlobalValueMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Global global,
      required Value2 value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSetGlobalValueMethodWasmiModuleIdConstMeta;

  WasmMemoryType getMemoryTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMemoryTypeMethodWasmiModuleIdConstMeta;

  Uint8List getMemoryDataMethodWasmiModuleId(
      {required WasmiModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMemoryDataMethodWasmiModuleIdConstMeta;

  Uint8List readMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Memory memory,
      required int offset,
      required int bytes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadMemoryMethodWasmiModuleIdConstMeta;

  int getMemoryPagesMethodWasmiModuleId(
      {required WasmiModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryPagesMethodWasmiModuleIdConstMeta;

  void writeMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Memory memory,
      required int offset,
      required Uint8List buffer,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteMemoryMethodWasmiModuleIdConstMeta;

  int growMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Memory memory,
      required int pages,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowMemoryMethodWasmiModuleIdConstMeta;

  int getTableSizeMethodWasmiModuleId(
      {required WasmiModuleId that, required Table table, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableSizeMethodWasmiModuleIdConstMeta;

  TableTy getTableTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Table table, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableTypeMethodWasmiModuleIdConstMeta;

  int growTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int delta,
      required Value2 value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowTableMethodWasmiModuleIdConstMeta;

  Value2? getTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int index,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableMethodWasmiModuleIdConstMeta;

  void setTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int index,
      required Value2 value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetTableMethodWasmiModuleIdConstMeta;

  void fillTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int index,
      required Value2 value,
      required int len,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFillTableMethodWasmiModuleIdConstMeta;

  List<ModuleImportDesc> getModuleImportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleImportsMethodCompiledModuleConstMeta;

  List<ModuleExportDesc> getModuleExportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodCompiledModuleConstMeta;

  DropFnType get dropOpaqueArcStdSyncMutexModule;
  ShareFnType get shareOpaqueArcStdSyncMutexModule;
  OpaqueTypeFinalizer get ArcStdSyncMutexModuleFinalizer;

  DropFnType get dropOpaqueFunc;
  ShareFnType get shareOpaqueFunc;
  OpaqueTypeFinalizer get FuncFinalizer;

  DropFnType get dropOpaqueGlobal;
  ShareFnType get shareOpaqueGlobal;
  OpaqueTypeFinalizer get GlobalFinalizer;

  DropFnType get dropOpaqueMemory;
  ShareFnType get shareOpaqueMemory;
  OpaqueTypeFinalizer get MemoryFinalizer;

  DropFnType get dropOpaqueTable;
  ShareFnType get shareOpaqueTable;
  OpaqueTypeFinalizer get TableFinalizer;
}

@sealed
class ArcStdSyncMutexModule extends FrbOpaque {
  final WasmiDart bridge;
  ArcStdSyncMutexModule.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcStdSyncMutexModule;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcStdSyncMutexModule;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcStdSyncMutexModuleFinalizer;
}

@sealed
class Func extends FrbOpaque {
  final WasmiDart bridge;
  Func.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueFunc;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueFunc;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.FuncFinalizer;
}

@sealed
class Global extends FrbOpaque {
  final WasmiDart bridge;
  Global.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueGlobal;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueGlobal;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.GlobalFinalizer;
}

@sealed
class Memory extends FrbOpaque {
  final WasmiDart bridge;
  Memory.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMemory;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMemory;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MemoryFinalizer;
}

@sealed
class Table extends FrbOpaque {
  final WasmiDart bridge;
  Table.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueTable;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueTable;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.TableFinalizer;
}

class CompiledModule {
  final WasmiDart bridge;
  final ArcStdSyncMutexModule field0;

  const CompiledModule({
    required this.bridge,
    required this.field0,
  });

  List<ModuleImportDesc> getModuleImports({dynamic hint}) =>
      bridge.getModuleImportsMethodCompiledModule(
        that: this,
      );

  List<ModuleExportDesc> getModuleExports({dynamic hint}) =>
      bridge.getModuleExportsMethodCompiledModule(
        that: this,
      );
}

class EnvVariable {
  final String name;
  final String value;

  const EnvVariable({
    required this.name,
    required this.value,
  });
}

@freezed
class ExternalType with _$ExternalType {
  const factory ExternalType.func(
    FuncTy field0,
  ) = ExternalType_Func;
  const factory ExternalType.global(
    GlobalTy field0,
  ) = ExternalType_Global;
  const factory ExternalType.table(
    TableTy field0,
  ) = ExternalType_Table;
  const factory ExternalType.memory(
    WasmMemoryType field0,
  ) = ExternalType_Memory;
}

@freezed
class ExternalValue with _$ExternalValue {
  const factory ExternalValue.func(
    Func field0,
  ) = ExternalValue_Func;
  const factory ExternalValue.global(
    Global field0,
  ) = ExternalValue_Global;
  const factory ExternalValue.table(
    Table field0,
  ) = ExternalValue_Table;
  const factory ExternalValue.memory(
    Memory field0,
  ) = ExternalValue_Memory;
}

class FuncTy {
  /// The number of function parameters.
  final List<ValueTy> params;

  /// The ordered and merged parameter and result types of the function type.]
  final List<ValueTy> results;

  const FuncTy({
    required this.params,
    required this.results,
  });
}

class GlobalTy {
  /// The value type of the global variable.
  final ValueTy content;

  /// The mutability of the global variable.
  final Mutability mutability;

  const GlobalTy({
    required this.content,
    required this.mutability,
  });
}

class ModuleConfig {
  /// Is `true` if the [`multi-value`] Wasm proposal is enabled.
  final bool? multiValue;

  /// Is `true` if the [`bulk-memory`] Wasm proposal is enabled.
  final bool? bulkMemory;

  /// Is `true` if the [`reference-types`] Wasm proposal is enabled.
  final bool? referenceTypes;

  /// Is `true` if `wasmi` executions shall consume fuel.
  final bool? consumeFuel;
  final ModuleConfigWasmi? wasmi;
  final ModuleConfigWasmtime? wasmtime;

  const ModuleConfig({
    this.multiValue,
    this.bulkMemory,
    this.referenceTypes,
    this.consumeFuel,
    this.wasmi,
    this.wasmtime,
  });
}

class ModuleConfigWasmi {
  /// WASMI
  /// The limits set on the value stack and call stack.
  final WasiStackLimits? stackLimits;

  /// The amount of Wasm stacks to keep in cache at most.
  final int? cachedStacks;

  /// Is `true` if the `mutable-global` Wasm proposal is enabled.
  final bool? mutableGlobal;

  /// Is `true` if the `sign-extension` Wasm proposal is enabled.
  final bool? signExtension;

  /// Is `true` if the `saturating-float-to-int` Wasm proposal is enabled.
  final bool? saturatingFloatToInt;

  /// Is `true` if the [`tail-call`] Wasm proposal is enabled.
  final bool? tailCall;

  /// Is `true` if the [`extended-const`] Wasm proposal is enabled.
  final bool? extendedConst;

  /// Is `true` if Wasm instructions on `f32` and `f64` types are allowed.
  final bool? floats;

  const ModuleConfigWasmi({
    this.stackLimits,
    this.cachedStacks,
    this.mutableGlobal,
    this.signExtension,
    this.saturatingFloatToInt,
    this.tailCall,
    this.extendedConst,
    this.floats,
  });
}

class ModuleConfigWasmtime {
  /// Configures whether DWARF debug information will be emitted during
  /// compilation.
  final bool? debugInfo;
  final bool? wasmBacktrace;
  final bool? nativeUnwindInfo;
  final bool? epochInterruption;
  final int? maxWasmStack;
  final bool? wasmThreads;
  final bool? wasmSimd;
  final bool? wasmMultiMemory;
  final bool? wasmMemory64;
  final int? staticMemoryMaximumSize;
  final bool? staticMemoryForced;
  final int? staticMemoryGuardSize;
  final bool? parallelCompilation;
  final bool? generateAddressMap;

  const ModuleConfigWasmtime({
    this.debugInfo,
    this.wasmBacktrace,
    this.nativeUnwindInfo,
    this.epochInterruption,
    this.maxWasmStack,
    this.wasmThreads,
    this.wasmSimd,
    this.wasmMultiMemory,
    this.wasmMemory64,
    this.staticMemoryMaximumSize,
    this.staticMemoryForced,
    this.staticMemoryGuardSize,
    this.parallelCompilation,
    this.generateAddressMap,
  });
}

class ModuleExportDesc {
  final String name;
  final ExternalType ty;

  const ModuleExportDesc({
    required this.name,
    required this.ty,
  });
}

class ModuleExportValue {
  final ModuleExportDesc desc;
  final ExternalValue value;

  const ModuleExportValue({
    required this.desc,
    required this.value,
  });
}

class ModuleImport {
  final String module;
  final String name;
  final ExternalValue value;

  const ModuleImport({
    required this.module,
    required this.name,
    required this.value,
  });
}

class ModuleImportDesc {
  final String module;
  final String name;
  final ExternalType ty;

  const ModuleImportDesc({
    required this.module,
    required this.name,
    required this.ty,
  });
}

enum Mutability {
  /// The value of the global variable is a constant.
  Const,

  /// The value of the global variable is mutable.
  Var,
}

class PreopenedDir {
  final String wasmGuestPath;
  final String hostPath;

  const PreopenedDir({
    required this.wasmGuestPath,
    required this.hostPath,
  });
}

class TableTy {
  /// The type of values stored in the [`Table`].
  final ValueTy element;

  /// The minimum number of elements the [`Table`] must have.
  final int min;

  /// The optional maximum number of elements the [`Table`] can have.
  ///
  /// If this is `None` then the [`Table`] is not limited in size.
  final int? max;

  const TableTy({
    required this.element,
    required this.min,
    this.max,
  });
}

class TableType2 {
  /// The minimum number of elements the [`Table`] must have.
  final int min;

  /// The optional maximum number of elements the [`Table`] can have.
  ///
  /// If this is `None` then the [`Table`] is not limited in size.
  final int? max;

  const TableType2({
    required this.min,
    this.max,
  });
}

@freezed
class Value2 with _$Value2 {
  /// Value of 32-bit signed or unsigned integer.
  const factory Value2.i32(
    int field0,
  ) = Value2_I32;

  /// Value of 64-bit signed or unsigned integer.
  const factory Value2.i64(
    int field0,
  ) = Value2_I64;

  /// Value of 32-bit IEEE 754-2008 floating point number.
  const factory Value2.f32(
    double field0,
  ) = Value2_F32;

  /// Value of 64-bit IEEE 754-2008 floating point number.
  const factory Value2.f64(
    double field0,
  ) = Value2_F64;

  /// A nullable [`Func`][`crate::Func`] reference, a.k.a. [`FuncRef`].
  const factory Value2.funcRef([
    Func? field0,
  ]) = Value2_FuncRef;

  /// A nullable external object reference, a.k.a. [`ExternRef`].
  const factory Value2.externRef(
    int field0,
  ) = Value2_ExternRef;
}

enum ValueTy {
  /// 32-bit signed or unsigned integer.
  I32,

  /// 64-bit signed or unsigned integer.
  I64,

  /// 32-bit IEEE 754-2008 floating point number.
  F32,

  /// 64-bit IEEE 754-2008 floating point number.
  F64,

  /// A nullable function reference.
  FuncRef,

  /// A nullable external reference.
  ExternRef,
}

class WasiConfig {
  final bool captureStdout;
  final bool captureStderr;
  final bool inheritStdin;
  final bool inheritEnv;
  final bool inheritArgs;
  final List<String> args;
  final List<EnvVariable> env;
  final List<String> preopenedFiles;
  final List<PreopenedDir> preopenedDirs;

  const WasiConfig({
    required this.captureStdout,
    required this.captureStderr,
    required this.inheritStdin,
    required this.inheritEnv,
    required this.inheritArgs,
    required this.args,
    required this.env,
    required this.preopenedFiles,
    required this.preopenedDirs,
  });
}

/// The configured limits of the Wasm stack.
class WasiStackLimits {
  /// The initial value stack height that the Wasm stack prepares.
  final int initialValueStackHeight;

  /// The maximum value stack height in use that the Wasm stack allows.
  final int maximumValueStackHeight;

  /// The maximum number of nested calls that the Wasm stack allows.
  final int maximumRecursionDepth;

  const WasiStackLimits({
    required this.initialValueStackHeight,
    required this.maximumValueStackHeight,
    required this.maximumRecursionDepth,
  });
}

class WasmMemoryType {
  final int initialPages;
  final int? maximumPages;

  const WasmMemoryType({
    required this.initialPages,
    this.maximumPages,
  });
}

class WasmiInstanceId {
  final WasmiDart bridge;
  final int field0;

  const WasmiInstanceId({
    required this.bridge,
    required this.field0,
  });

  Future<List<Value2>> callFunction({required String name, dynamic hint}) =>
      bridge.callFunctionMethodWasmiInstanceId(
        that: this,
        name: name,
      );

  List<Value2> callFunctionWithArgsSync(
          {required String name, required List<Value2> args, dynamic hint}) =>
      bridge.callFunctionWithArgsSyncMethodWasmiInstanceId(
        that: this,
        name: name,
        args: args,
      );

  Future<List<Value2>> callFunctionWithArgs(
          {required String name, required List<Value2> args, dynamic hint}) =>
      bridge.callFunctionWithArgsMethodWasmiInstanceId(
        that: this,
        name: name,
        args: args,
      );

  List<ModuleExportValue> exports({dynamic hint}) =>
      bridge.exportsMethodWasmiInstanceId(
        that: this,
      );
}

class WasmiModuleId {
  final WasmiDart bridge;
  final int field0;

  const WasmiModuleId({
    required this.bridge,
    required this.field0,
  });

  WasmiInstanceId instantiateSync({dynamic hint}) =>
      bridge.instantiateSyncMethodWasmiModuleId(
        that: this,
      );

  Future<WasmiInstanceId> instantiate({dynamic hint}) =>
      bridge.instantiateMethodWasmiModuleId(
        that: this,
      );

  void linkImports({required List<ModuleImport> imports, dynamic hint}) =>
      bridge.linkImportsMethodWasmiModuleId(
        that: this,
        imports: imports,
      );

  Future<void> dispose({dynamic hint}) => bridge.disposeMethodWasmiModuleId(
        that: this,
      );

  List<Value2> callFunctionHandleSync(
          {required Func func, required List<Value2> args, dynamic hint}) =>
      bridge.callFunctionHandleSyncMethodWasmiModuleId(
        that: this,
        func: func,
        args: args,
      );

  Future<List<Value2>> callFunctionHandle(
          {required Func func, required List<Value2> args, dynamic hint}) =>
      bridge.callFunctionHandleMethodWasmiModuleId(
        that: this,
        func: func,
        args: args,
      );

  FuncTy getFunctionType({required Func func, dynamic hint}) =>
      bridge.getFunctionTypeMethodWasmiModuleId(
        that: this,
        func: func,
      );

  Func createFunction(
          {required int functionPointer,
          required int functionId,
          required List<ValueTy> paramTypes,
          required List<ValueTy> resultTypes,
          dynamic hint}) =>
      bridge.createFunctionMethodWasmiModuleId(
        that: this,
        functionPointer: functionPointer,
        functionId: functionId,
        paramTypes: paramTypes,
        resultTypes: resultTypes,
      );

  Memory createMemory({required WasmMemoryType memoryType, dynamic hint}) =>
      bridge.createMemoryMethodWasmiModuleId(
        that: this,
        memoryType: memoryType,
      );

  Global createGlobal(
          {required Value2 value,
          required Mutability mutability,
          dynamic hint}) =>
      bridge.createGlobalMethodWasmiModuleId(
        that: this,
        value: value,
        mutability: mutability,
      );

  Table createTable(
          {required Value2 value,
          required TableType2 tableType,
          dynamic hint}) =>
      bridge.createTableMethodWasmiModuleId(
        that: this,
        value: value,
        tableType: tableType,
      );

  GlobalTy getGlobalType({required Global global, dynamic hint}) =>
      bridge.getGlobalTypeMethodWasmiModuleId(
        that: this,
        global: global,
      );

  Value2 getGlobalValue({required Global global, dynamic hint}) =>
      bridge.getGlobalValueMethodWasmiModuleId(
        that: this,
        global: global,
      );

  void setGlobalValue(
          {required Global global, required Value2 value, dynamic hint}) =>
      bridge.setGlobalValueMethodWasmiModuleId(
        that: this,
        global: global,
        value: value,
      );

  WasmMemoryType getMemoryType({required Memory memory, dynamic hint}) =>
      bridge.getMemoryTypeMethodWasmiModuleId(
        that: this,
        memory: memory,
      );

  Uint8List getMemoryData({required Memory memory, dynamic hint}) =>
      bridge.getMemoryDataMethodWasmiModuleId(
        that: this,
        memory: memory,
      );

  Uint8List readMemory(
          {required Memory memory,
          required int offset,
          required int bytes,
          dynamic hint}) =>
      bridge.readMemoryMethodWasmiModuleId(
        that: this,
        memory: memory,
        offset: offset,
        bytes: bytes,
      );

  int getMemoryPages({required Memory memory, dynamic hint}) =>
      bridge.getMemoryPagesMethodWasmiModuleId(
        that: this,
        memory: memory,
      );

  void writeMemory(
          {required Memory memory,
          required int offset,
          required Uint8List buffer,
          dynamic hint}) =>
      bridge.writeMemoryMethodWasmiModuleId(
        that: this,
        memory: memory,
        offset: offset,
        buffer: buffer,
      );

  int growMemory({required Memory memory, required int pages, dynamic hint}) =>
      bridge.growMemoryMethodWasmiModuleId(
        that: this,
        memory: memory,
        pages: pages,
      );

  int getTableSize({required Table table, dynamic hint}) =>
      bridge.getTableSizeMethodWasmiModuleId(
        that: this,
        table: table,
      );

  TableTy getTableType({required Table table, dynamic hint}) =>
      bridge.getTableTypeMethodWasmiModuleId(
        that: this,
        table: table,
      );

  int growTable(
          {required Table table,
          required int delta,
          required Value2 value,
          dynamic hint}) =>
      bridge.growTableMethodWasmiModuleId(
        that: this,
        table: table,
        delta: delta,
        value: value,
      );

  Value2? getTable({required Table table, required int index, dynamic hint}) =>
      bridge.getTableMethodWasmiModuleId(
        that: this,
        table: table,
        index: index,
      );

  void setTable(
          {required Table table,
          required int index,
          required Value2 value,
          dynamic hint}) =>
      bridge.setTableMethodWasmiModuleId(
        that: this,
        table: table,
        index: index,
        value: value,
      );

  void fillTable(
          {required Table table,
          required int index,
          required Value2 value,
          required int len,
          dynamic hint}) =>
      bridge.fillTableMethodWasmiModuleId(
        that: this,
        table: table,
        index: index,
        value: value,
        len: len,
      );
}

class WasmiDartImpl implements WasmiDart {
  final WasmiDartPlatform _platform;
  factory WasmiDartImpl(ExternalLibrary dylib) =>
      WasmiDartImpl.raw(WasmiDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory WasmiDartImpl.wasm(FutureOr<WasmModule> module) =>
      WasmiDartImpl(module as ExternalLibrary);
  WasmiDartImpl.raw(this._platform);
  Memory createSharedMemory({required CompiledModule module, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(module);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_create_shared_memory(arg0),
      parseSuccessData: _wire2api_Memory,
      constMeta: kCreateSharedMemoryConstMeta,
      argValues: [module],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateSharedMemoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_shared_memory",
        argNames: ["module"],
      );

  WasmiModuleId moduleBuilder(
      {required CompiledModule module, WasiConfig? wasiConfig, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(module);
    var arg1 = _platform.api2wire_opt_box_autoadd_wasi_config(wasiConfig);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_module_builder(arg0, arg1),
      parseSuccessData: _wire2api_wasmi_module_id,
      constMeta: kModuleBuilderConstMeta,
      argValues: [module, wasiConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kModuleBuilderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "module_builder",
        argNames: ["module", "wasiConfig"],
      );

  Future<Uint8List> parseWatFormat({required String wat, dynamic hint}) {
    var arg0 = _platform.api2wire_String(wat);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_wat_format(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kParseWatFormatConstMeta,
      argValues: [wat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_wat_format",
        argNames: ["wat"],
      );

  List<Value2> runFunction({required int pointer, dynamic hint}) {
    var arg0 = api2wire_usize(pointer);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_function(arg0),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kRunFunctionConstMeta,
      argValues: [pointer],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunFunctionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_function",
        argNames: ["pointer"],
      );

  List<Value2> runWasmFunc(
      {required int pointer, required List<Value2> params, dynamic hint}) {
    var arg0 = api2wire_usize(pointer);
    var arg1 = _platform.api2wire_list_value_2(params);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_wasm_func(arg0, arg1),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kRunWasmFuncConstMeta,
      argValues: [pointer, params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_wasm_func",
        argNames: ["pointer", "params"],
      );

  List<Value2> runWasmFuncMut(
      {required int pointer, required List<Value2> params, dynamic hint}) {
    var arg0 = api2wire_usize(pointer);
    var arg1 = _platform.api2wire_list_value_2(params);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_wasm_func_mut(arg0, arg1),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kRunWasmFuncMutConstMeta,
      argValues: [pointer, params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncMutConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_wasm_func_mut",
        argNames: ["pointer", "params"],
      );

  bool runWasmFuncVoid(
      {required int pointer, required List<Value2> params, dynamic hint}) {
    var arg0 = api2wire_usize(pointer);
    var arg1 = _platform.api2wire_list_value_2(params);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_run_wasm_func_void(arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kRunWasmFuncVoidConstMeta,
      argValues: [pointer, params],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunWasmFuncVoidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_wasm_func_void",
        argNames: ["pointer", "params"],
      );

  Future<CompiledModule> compileWasm(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    var arg1 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_compile_wasm(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_compiled_module(d),
      constMeta: kCompileWasmConstMeta,
      argValues: [moduleWasm, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm",
        argNames: ["moduleWasm", "config"],
      );

  CompiledModule compileWasmSync(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    var arg1 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_compile_wasm_sync(arg0, arg1),
      parseSuccessData: _wire2api_compiled_module,
      constMeta: kCompileWasmSyncConstMeta,
      argValues: [moduleWasm, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm_sync",
        argNames: ["moduleWasm", "config"],
      );

  Future<void> callWasm({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_call_wasm(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCallWasmConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallWasmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "call_wasm",
        argNames: [],
      );

  Future<int> add({required int a, required int b, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(a);
    var arg1 = _platform.api2wire_i64(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add(port_, arg0, arg1),
      parseSuccessData: _wire2api_i64,
      constMeta: kAddConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add",
        argNames: ["a", "b"],
      );

  Future<List<Value2>> callFunctionMethodWasmiInstanceId(
      {required WasmiInstanceId that, required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_instance_id(that);
    var arg1 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function__method__WasmiInstanceId(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionMethodWasmiInstanceIdConstMeta,
      argValues: [that, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionMethodWasmiInstanceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function__method__WasmiInstanceId",
            argNames: ["that", "name"],
          );

  List<Value2> callFunctionWithArgsSyncMethodWasmiInstanceId(
      {required WasmiInstanceId that,
      required String name,
      required List<Value2> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_instance_id(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_list_value_2(args);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_call_function_with_args_sync__method__WasmiInstanceId(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionWithArgsSyncMethodWasmiInstanceIdConstMeta,
      argValues: [that, name, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsSyncMethodWasmiInstanceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_with_args_sync__method__WasmiInstanceId",
            argNames: ["that", "name", "args"],
          );

  Future<List<Value2>> callFunctionWithArgsMethodWasmiInstanceId(
      {required WasmiInstanceId that,
      required String name,
      required List<Value2> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_instance_id(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_list_value_2(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function_with_args__method__WasmiInstanceId(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionWithArgsMethodWasmiInstanceIdConstMeta,
      argValues: [that, name, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionWithArgsMethodWasmiInstanceIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_with_args__method__WasmiInstanceId",
            argNames: ["that", "name", "args"],
          );

  List<ModuleExportValue> exportsMethodWasmiInstanceId(
      {required WasmiInstanceId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_instance_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_exports__method__WasmiInstanceId(arg0),
      parseSuccessData: _wire2api_list_module_export_value,
      constMeta: kExportsMethodWasmiInstanceIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExportsMethodWasmiInstanceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "exports__method__WasmiInstanceId",
        argNames: ["that"],
      );

  WasmiInstanceId instantiateSyncMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_instantiate_sync__method__WasmiModuleId(arg0),
      parseSuccessData: _wire2api_wasmi_instance_id,
      constMeta: kInstantiateSyncMethodWasmiModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kInstantiateSyncMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "instantiate_sync__method__WasmiModuleId",
            argNames: ["that"],
          );

  Future<WasmiInstanceId> instantiateMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_instantiate__method__WasmiModuleId(port_, arg0),
      parseSuccessData: (d) => _wire2api_wasmi_instance_id(d),
      constMeta: kInstantiateMethodWasmiModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInstantiateMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "instantiate__method__WasmiModuleId",
        argNames: ["that"],
      );

  void linkImportsMethodWasmiModuleId(
      {required WasmiModuleId that,
      required List<ModuleImport> imports,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_list_module_import(imports);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_link_imports__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kLinkImportsMethodWasmiModuleIdConstMeta,
      argValues: [that, imports],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLinkImportsMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "link_imports__method__WasmiModuleId",
        argNames: ["that", "imports"],
      );

  Future<void> disposeMethodWasmiModuleId(
      {required WasmiModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dispose__method__WasmiModuleId(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisposeMethodWasmiModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisposeMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dispose__method__WasmiModuleId",
        argNames: ["that"],
      );

  List<Value2> callFunctionHandleSyncMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Func func,
      required List<Value2> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Func(func);
    var arg2 = _platform.api2wire_list_value_2(args);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_call_function_handle_sync__method__WasmiModuleId(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionHandleSyncMethodWasmiModuleIdConstMeta,
      argValues: [that, func, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleSyncMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle_sync__method__WasmiModuleId",
            argNames: ["that", "func", "args"],
          );

  Future<List<Value2>> callFunctionHandleMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Func func,
      required List<Value2> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Func(func);
    var arg2 = _platform.api2wire_list_value_2(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function_handle__method__WasmiModuleId(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_value_2,
      constMeta: kCallFunctionHandleMethodWasmiModuleIdConstMeta,
      argValues: [that, func, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle__method__WasmiModuleId",
            argNames: ["that", "func", "args"],
          );

  FuncTy getFunctionTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Func func, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Func(func);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_function_type__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_func_ty,
      constMeta: kGetFunctionTypeMethodWasmiModuleIdConstMeta,
      argValues: [that, func],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetFunctionTypeMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_function_type__method__WasmiModuleId",
            argNames: ["that", "func"],
          );

  Func createFunctionMethodWasmiModuleId(
      {required WasmiModuleId that,
      required int functionPointer,
      required int functionId,
      required List<ValueTy> paramTypes,
      required List<ValueTy> resultTypes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = api2wire_usize(functionPointer);
    var arg2 = api2wire_u32(functionId);
    var arg3 = _platform.api2wire_list_value_ty(paramTypes);
    var arg4 = _platform.api2wire_list_value_ty(resultTypes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_function__method__WasmiModuleId(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_Func,
      constMeta: kCreateFunctionMethodWasmiModuleIdConstMeta,
      argValues: [that, functionPointer, functionId, paramTypes, resultTypes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateFunctionMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_function__method__WasmiModuleId",
            argNames: [
              "that",
              "functionPointer",
              "functionId",
              "paramTypes",
              "resultTypes"
            ],
          );

  Memory createMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required WasmMemoryType memoryType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_wasm_memory_type(memoryType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_create_memory__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_Memory,
      constMeta: kCreateMemoryMethodWasmiModuleIdConstMeta,
      argValues: [that, memoryType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateMemoryMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_memory__method__WasmiModuleId",
            argNames: ["that", "memoryType"],
          );

  Global createGlobalMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Value2 value,
      required Mutability mutability,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_value_2(value);
    var arg2 = api2wire_mutability(mutability);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_global__method__WasmiModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_Global,
      constMeta: kCreateGlobalMethodWasmiModuleIdConstMeta,
      argValues: [that, value, mutability],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateGlobalMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_global__method__WasmiModuleId",
            argNames: ["that", "value", "mutability"],
          );

  Table createTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Value2 value,
      required TableType2 tableType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_value_2(value);
    var arg2 = _platform.api2wire_box_autoadd_table_type_2(tableType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_table__method__WasmiModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_Table,
      constMeta: kCreateTableMethodWasmiModuleIdConstMeta,
      argValues: [that, value, tableType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateTableMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_table__method__WasmiModuleId",
        argNames: ["that", "value", "tableType"],
      );

  GlobalTy getGlobalTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Global global, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_global_type__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_global_ty,
      constMeta: kGetGlobalTypeMethodWasmiModuleIdConstMeta,
      argValues: [that, global],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalTypeMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_global_type__method__WasmiModuleId",
            argNames: ["that", "global"],
          );

  Value2 getGlobalValueMethodWasmiModuleId(
      {required WasmiModuleId that, required Global global, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_global_value__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_value_2,
      constMeta: kGetGlobalValueMethodWasmiModuleIdConstMeta,
      argValues: [that, global],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalValueMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_global_value__method__WasmiModuleId",
            argNames: ["that", "global"],
          );

  void setGlobalValueMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Global global,
      required Value2 value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    var arg2 = _platform.api2wire_box_autoadd_value_2(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_global_value__method__WasmiModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetGlobalValueMethodWasmiModuleIdConstMeta,
      argValues: [that, global, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSetGlobalValueMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "set_global_value__method__WasmiModuleId",
            argNames: ["that", "global", "value"],
          );

  WasmMemoryType getMemoryTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_type__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_wasm_memory_type,
      constMeta: kGetMemoryTypeMethodWasmiModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryTypeMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_type__method__WasmiModuleId",
            argNames: ["that", "memory"],
          );

  Uint8List getMemoryDataMethodWasmiModuleId(
      {required WasmiModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_data__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kGetMemoryDataMethodWasmiModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_data__method__WasmiModuleId",
            argNames: ["that", "memory"],
          );

  Uint8List readMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Memory memory,
      required int offset,
      required int bytes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_usize(offset);
    var arg3 = api2wire_usize(bytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_read_memory__method__WasmiModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kReadMemoryMethodWasmiModuleIdConstMeta,
      argValues: [that, memory, offset, bytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadMemoryMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "read_memory__method__WasmiModuleId",
        argNames: ["that", "memory", "offset", "bytes"],
      );

  int getMemoryPagesMethodWasmiModuleId(
      {required WasmiModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_pages__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kGetMemoryPagesMethodWasmiModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryPagesMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_pages__method__WasmiModuleId",
            argNames: ["that", "memory"],
          );

  void writeMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Memory memory,
      required int offset,
      required Uint8List buffer,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_usize(offset);
    var arg3 = _platform.api2wire_uint_8_list(buffer);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_write_memory__method__WasmiModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kWriteMemoryMethodWasmiModuleIdConstMeta,
      argValues: [that, memory, offset, buffer],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWriteMemoryMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "write_memory__method__WasmiModuleId",
        argNames: ["that", "memory", "offset", "buffer"],
      );

  int growMemoryMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Memory memory,
      required int pages,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_u32(pages);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_grow_memory__method__WasmiModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      constMeta: kGrowMemoryMethodWasmiModuleIdConstMeta,
      argValues: [that, memory, pages],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGrowMemoryMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "grow_memory__method__WasmiModuleId",
        argNames: ["that", "memory", "pages"],
      );

  int getTableSizeMethodWasmiModuleId(
      {required WasmiModuleId that, required Table table, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table_size__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u32,
      constMeta: kGetTableSizeMethodWasmiModuleIdConstMeta,
      argValues: [that, table],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTableSizeMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_table_size__method__WasmiModuleId",
            argNames: ["that", "table"],
          );

  TableTy getTableTypeMethodWasmiModuleId(
      {required WasmiModuleId that, required Table table, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table_type__method__WasmiModuleId(arg0, arg1),
      parseSuccessData: _wire2api_table_ty,
      constMeta: kGetTableTypeMethodWasmiModuleIdConstMeta,
      argValues: [that, table],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTableTypeMethodWasmiModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_table_type__method__WasmiModuleId",
            argNames: ["that", "table"],
          );

  int growTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int delta,
      required Value2 value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(delta);
    var arg3 = _platform.api2wire_box_autoadd_value_2(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_grow_table__method__WasmiModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_u32,
      constMeta: kGrowTableMethodWasmiModuleIdConstMeta,
      argValues: [that, table, delta, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGrowTableMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "grow_table__method__WasmiModuleId",
        argNames: ["that", "table", "delta", "value"],
      );

  Value2? getTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int index,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table__method__WasmiModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_box_autoadd_value_2,
      constMeta: kGetTableMethodWasmiModuleIdConstMeta,
      argValues: [that, table, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTableMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_table__method__WasmiModuleId",
        argNames: ["that", "table", "index"],
      );

  void setTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int index,
      required Value2 value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    var arg3 = _platform.api2wire_box_autoadd_value_2(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_table__method__WasmiModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetTableMethodWasmiModuleIdConstMeta,
      argValues: [that, table, index, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetTableMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_table__method__WasmiModuleId",
        argNames: ["that", "table", "index", "value"],
      );

  void fillTableMethodWasmiModuleId(
      {required WasmiModuleId that,
      required Table table,
      required int index,
      required Value2 value,
      required int len,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasmi_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    var arg3 = _platform.api2wire_box_autoadd_value_2(value);
    var arg4 = api2wire_u32(len);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_fill_table__method__WasmiModuleId(arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kFillTableMethodWasmiModuleIdConstMeta,
      argValues: [that, table, index, value, len],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFillTableMethodWasmiModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fill_table__method__WasmiModuleId",
        argNames: ["that", "table", "index", "value", "len"],
      );

  List<ModuleImportDesc> getModuleImportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_module_imports__method__CompiledModule(arg0),
      parseSuccessData: _wire2api_list_module_import_desc,
      constMeta: kGetModuleImportsMethodCompiledModuleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleImportsMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_imports__method__CompiledModule",
            argNames: ["that"],
          );

  List<ModuleExportDesc> getModuleExportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_module_exports__method__CompiledModule(arg0),
      parseSuccessData: _wire2api_list_module_export_desc,
      constMeta: kGetModuleExportsMethodCompiledModuleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_exports__method__CompiledModule",
            argNames: ["that"],
          );

  DropFnType get dropOpaqueArcStdSyncMutexModule =>
      _platform.inner.drop_opaque_ArcStdSyncMutexModule;
  ShareFnType get shareOpaqueArcStdSyncMutexModule =>
      _platform.inner.share_opaque_ArcStdSyncMutexModule;
  OpaqueTypeFinalizer get ArcStdSyncMutexModuleFinalizer =>
      _platform.ArcStdSyncMutexModuleFinalizer;

  DropFnType get dropOpaqueFunc => _platform.inner.drop_opaque_Func;
  ShareFnType get shareOpaqueFunc => _platform.inner.share_opaque_Func;
  OpaqueTypeFinalizer get FuncFinalizer => _platform.FuncFinalizer;

  DropFnType get dropOpaqueGlobal => _platform.inner.drop_opaque_Global;
  ShareFnType get shareOpaqueGlobal => _platform.inner.share_opaque_Global;
  OpaqueTypeFinalizer get GlobalFinalizer => _platform.GlobalFinalizer;

  DropFnType get dropOpaqueMemory => _platform.inner.drop_opaque_Memory;
  ShareFnType get shareOpaqueMemory => _platform.inner.share_opaque_Memory;
  OpaqueTypeFinalizer get MemoryFinalizer => _platform.MemoryFinalizer;

  DropFnType get dropOpaqueTable => _platform.inner.drop_opaque_Table;
  ShareFnType get shareOpaqueTable => _platform.inner.share_opaque_Table;
  OpaqueTypeFinalizer get TableFinalizer => _platform.TableFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcStdSyncMutexModule _wire2api_ArcStdSyncMutexModule(dynamic raw) {
    return ArcStdSyncMutexModule.fromRaw(raw[0], raw[1], this);
  }

  Func _wire2api_Func(dynamic raw) {
    return Func.fromRaw(raw[0], raw[1], this);
  }

  Global _wire2api_Global(dynamic raw) {
    return Global.fromRaw(raw[0], raw[1], this);
  }

  Memory _wire2api_Memory(dynamic raw) {
    return Memory.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Table _wire2api_Table(dynamic raw) {
    return Table.fromRaw(raw[0], raw[1], this);
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Func _wire2api_box_autoadd_Func(dynamic raw) {
    return _wire2api_Func(raw);
  }

  FuncTy _wire2api_box_autoadd_func_ty(dynamic raw) {
    return _wire2api_func_ty(raw);
  }

  GlobalTy _wire2api_box_autoadd_global_ty(dynamic raw) {
    return _wire2api_global_ty(raw);
  }

  TableTy _wire2api_box_autoadd_table_ty(dynamic raw) {
    return _wire2api_table_ty(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  Value2 _wire2api_box_autoadd_value_2(dynamic raw) {
    return _wire2api_value_2(raw);
  }

  WasmMemoryType _wire2api_box_autoadd_wasm_memory_type(dynamic raw) {
    return _wire2api_wasm_memory_type(raw);
  }

  CompiledModule _wire2api_compiled_module(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CompiledModule(
      bridge: this,
      field0: _wire2api_ArcStdSyncMutexModule(arr[0]),
    );
  }

  ExternalType _wire2api_external_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ExternalType_Func(
          _wire2api_box_autoadd_func_ty(raw[1]),
        );
      case 1:
        return ExternalType_Global(
          _wire2api_box_autoadd_global_ty(raw[1]),
        );
      case 2:
        return ExternalType_Table(
          _wire2api_box_autoadd_table_ty(raw[1]),
        );
      case 3:
        return ExternalType_Memory(
          _wire2api_box_autoadd_wasm_memory_type(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ExternalValue _wire2api_external_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ExternalValue_Func(
          _wire2api_Func(raw[1]),
        );
      case 1:
        return ExternalValue_Global(
          _wire2api_Global(raw[1]),
        );
      case 2:
        return ExternalValue_Table(
          _wire2api_Table(raw[1]),
        );
      case 3:
        return ExternalValue_Memory(
          _wire2api_Memory(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FuncTy _wire2api_func_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FuncTy(
      params: _wire2api_list_value_ty(arr[0]),
      results: _wire2api_list_value_ty(arr[1]),
    );
  }

  GlobalTy _wire2api_global_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GlobalTy(
      content: _wire2api_value_ty(arr[0]),
      mutability: _wire2api_mutability(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<ModuleExportDesc> _wire2api_list_module_export_desc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_export_desc).toList();
  }

  List<ModuleExportValue> _wire2api_list_module_export_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_export_value).toList();
  }

  List<ModuleImportDesc> _wire2api_list_module_import_desc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_import_desc).toList();
  }

  List<Value2> _wire2api_list_value_2(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_value_2).toList();
  }

  List<ValueTy> _wire2api_list_value_ty(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_value_ty).toList();
  }

  ModuleExportDesc _wire2api_module_export_desc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModuleExportDesc(
      name: _wire2api_String(arr[0]),
      ty: _wire2api_external_type(arr[1]),
    );
  }

  ModuleExportValue _wire2api_module_export_value(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModuleExportValue(
      desc: _wire2api_module_export_desc(arr[0]),
      value: _wire2api_external_value(arr[1]),
    );
  }

  ModuleImportDesc _wire2api_module_import_desc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ModuleImportDesc(
      module: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      ty: _wire2api_external_type(arr[2]),
    );
  }

  Mutability _wire2api_mutability(dynamic raw) {
    return Mutability.values[raw];
  }

  Func? _wire2api_opt_box_autoadd_Func(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Func(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  Value2? _wire2api_opt_box_autoadd_value_2(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_value_2(raw);
  }

  TableTy _wire2api_table_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TableTy(
      element: _wire2api_value_ty(arr[0]),
      min: _wire2api_u32(arr[1]),
      max: _wire2api_opt_box_autoadd_u32(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  Value2 _wire2api_value_2(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Value2_I32(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return Value2_I64(
          _wire2api_i64(raw[1]),
        );
      case 2:
        return Value2_F32(
          _wire2api_f32(raw[1]),
        );
      case 3:
        return Value2_F64(
          _wire2api_f64(raw[1]),
        );
      case 4:
        return Value2_FuncRef(
          _wire2api_opt_box_autoadd_Func(raw[1]),
        );
      case 5:
        return Value2_ExternRef(
          _wire2api_u32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ValueTy _wire2api_value_ty(dynamic raw) {
    return ValueTy.values[raw];
  }

  WasmMemoryType _wire2api_wasm_memory_type(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WasmMemoryType(
      initialPages: _wire2api_u32(arr[0]),
      maximumPages: _wire2api_opt_box_autoadd_u32(arr[1]),
    );
  }

  WasmiInstanceId _wire2api_wasmi_instance_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmiInstanceId(
      bridge: this,
      field0: _wire2api_u32(arr[0]),
    );
  }

  WasmiModuleId _wire2api_wasmi_module_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmiModuleId(
      bridge: this,
      field0: _wire2api_u32(arr[0]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_mutability(Mutability raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_value_ty(ValueTy raw) {
  return api2wire_i32(raw.index);
}

// Section: finalizer

extension WasmiDartImplPlatform on WasmiDartImpl {
  WasmiDartPlatform get platform => _platform;
}
